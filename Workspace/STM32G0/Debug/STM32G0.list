
STM32G0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005860  08005860  00006860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800597c  0800597c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800597c  0800597c  0000697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005984  08005984  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005984  08005984  00006984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800598c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000005c  080059e8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080059e8  000073c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012572  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f6  00000000  00000000  000195f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9d  00000000  00000000  0001cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cd4  00000000  00000000  0001dadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bcd  00000000  00000000  000367b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2908  00000000  00000000  0004b37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edc86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004438  00000000  00000000  000edccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f2104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005848 	.word	0x08005848

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005848 	.word	0x08005848

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b090      	sub	sp, #64	@ 0x40
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f000 fd95 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f847 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f000 fa3f 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 8000482:	f000 fa1f 	bl	80008c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000486:	f000 f889 	bl	800059c <MX_ADC1_Init>
  MX_I2C1_SMBUS_Init();
 800048a:	f000 f919 	bl	80006c0 <MX_I2C1_SMBUS_Init>
  MX_TIM17_Init();
 800048e:	f000 f95d 	bl	800074c <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f9e3 	bl	800085c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, LED_Pin, 0);
 8000496:	2380      	movs	r3, #128	@ 0x80
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	4815      	ldr	r0, [pc, #84]	@ (80004f0 <main+0x80>)
 800049c:	2200      	movs	r2, #0
 800049e:	0019      	movs	r1, r3
 80004a0:	f002 f914 	bl	80026cc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // hopefully starts the 33kHz clock
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <main+0x84>)
 80004a6:	2100      	movs	r1, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f003 f9cb 	bl	8003844 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOC, temp_Pin, 1);
 80004ae:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <main+0x88>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2180      	movs	r1, #128	@ 0x80
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 f909 	bl	80026cc <HAL_GPIO_WritePin>
  // Transmit a message
  char message[60];
  sprintf(message, "Startup\r\n");
 80004ba:	4a10      	ldr	r2, [pc, #64]	@ (80004fc <main+0x8c>)
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f004 fd23 	bl	8004f0c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	f7ff fe1d 	bl	8000108 <strlen>
 80004ce:	0003      	movs	r3, r0
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	2301      	movs	r3, #1
 80004d4:	425b      	negs	r3, r3
 80004d6:	1d39      	adds	r1, r7, #4
 80004d8:	4809      	ldr	r0, [pc, #36]	@ (8000500 <main+0x90>)
 80004da:	f003 ffc7 	bl	800446c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount); // this is an interrupt;
 80004de:	2303      	movs	r3, #3
 80004e0:	001a      	movs	r2, r3
 80004e2:	4908      	ldr	r1, [pc, #32]	@ (8000504 <main+0x94>)
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <main+0x98>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 f8d2 	bl	8001690 <HAL_ADC_Start_DMA>
 80004ec:	e7f7      	b.n	80004de <main+0x6e>
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	50000400 	.word	0x50000400
 80004f4:	20000188 	.word	0x20000188
 80004f8:	50000800 	.word	0x50000800
 80004fc:	08005860 	.word	0x08005860
 8000500:	200001d4 	.word	0x200001d4
 8000504:	20000268 	.word	0x20000268
 8000508:	20000078 	.word	0x20000078

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b093      	sub	sp, #76	@ 0x4c
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	2410      	movs	r4, #16
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2338      	movs	r3, #56	@ 0x38
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f004 fd15 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2310      	movs	r3, #16
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f004 fd0e 	bl	8004f4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2380      	movs	r3, #128	@ 0x80
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	0018      	movs	r0, r3
 8000536:	f002 f91b 	bl	8002770 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2202      	movs	r2, #2
 800053e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	0052      	lsls	r2, r2, #1
 8000546:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2240      	movs	r2, #64	@ 0x40
 8000552:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	f002 f953 	bl	8002808 <HAL_RCC_OscConfig>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000566:	f000 fadd 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	003b      	movs	r3, r7
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000582:	003b      	movs	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f002 fc58 	bl	8002e3c <HAL_RCC_ClockConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000590:	f000 fac8 	bl	8000b24 <Error_Handler>
  }
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b013      	add	sp, #76	@ 0x4c
 800059a:	bd90      	pop	{r4, r7, pc}

0800059c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	230c      	movs	r3, #12
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f004 fcce 	bl	8004f4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b0:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005b2:	4a3f      	ldr	r2, [pc, #252]	@ (80006b0 <MX_ADC1_Init+0x114>)
 80005b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005b6:	4b3d      	ldr	r3, [pc, #244]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	05d2      	lsls	r2, r2, #23
 80005bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005be:	4b3b      	ldr	r3, [pc, #236]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c4:	4b39      	ldr	r3, [pc, #228]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005ca:	4b38      	ldr	r3, [pc, #224]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	0392      	lsls	r2, r2, #14
 80005d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d2:	4b36      	ldr	r3, [pc, #216]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005d4:	2204      	movs	r2, #4
 80005d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d8:	4b34      	ldr	r3, [pc, #208]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005da:	2200      	movs	r2, #0
 80005dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005de:	4b33      	ldr	r3, [pc, #204]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e4:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80005ea:	4b30      	ldr	r3, [pc, #192]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <MX_ADC1_Init+0x110>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000600:	2200      	movs	r2, #0
 8000602:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000604:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000606:	222c      	movs	r2, #44	@ 0x2c
 8000608:	2100      	movs	r1, #0
 800060a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <MX_ADC1_Init+0x110>)
 800060e:	2200      	movs	r2, #0
 8000610:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000614:	2200      	movs	r2, #0
 8000616:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000618:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <MX_ADC1_Init+0x110>)
 800061a:	2200      	movs	r2, #0
 800061c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000620:	223c      	movs	r2, #60	@ 0x3c
 8000622:	2100      	movs	r1, #0
 8000624:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000628:	2200      	movs	r2, #0
 800062a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_ADC1_Init+0x110>)
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fe86 	bl	8001340 <HAL_ADC_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000638:	f000 fa74 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4a1d      	ldr	r2, [pc, #116]	@ (80006b4 <MX_ADC1_Init+0x118>)
 8000640:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	1d3a      	adds	r2, r7, #4
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f8b9 	bl	80017cc <HAL_ADC_ConfigChannel>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800065e:	f000 fa61 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <MX_ADC1_Init+0x11c>)
 8000666:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2204      	movs	r2, #4
 800066c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	1d3a      	adds	r2, r7, #4
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f001 f8a9 	bl	80017cc <HAL_ADC_ConfigChannel>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800067e:	f000 fa51 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <MX_ADC1_Init+0x120>)
 8000686:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2208      	movs	r2, #8
 800068c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_ADC1_Init+0x110>)
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f001 f899 	bl	80017cc <HAL_ADC_ConfigChannel>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800069e:	f000 fa41 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b004      	add	sp, #16
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	20000078 	.word	0x20000078
 80006b0:	40012400 	.word	0x40012400
 80006b4:	14000020 	.word	0x14000020
 80006b8:	18000040 	.word	0x18000040
 80006bc:	1c000080 	.word	0x1c000080

080006c0 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <MX_I2C1_SMBUS_Init+0x80>)
 80006c8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00503D58;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000744 <MX_I2C1_SMBUS_Init+0x84>)
 80006ce:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006d8:	2202      	movs	r2, #2
 80006da:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000080C3;
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 800070e:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <MX_I2C1_SMBUS_Init+0x88>)
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 8000714:	0018      	movs	r0, r3
 8000716:	f002 fed3 	bl	80034c0 <HAL_SMBUS_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 800071e:	f000 fa01 	bl	8000b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_I2C1_SMBUS_Init+0x7c>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f002 ff8c 	bl	8003644 <HAL_SMBUS_ConfigDigitalFilter>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000730:	f000 f9f8 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	20000138 	.word	0x20000138
 8000740:	40005400 	.word	0x40005400
 8000744:	00503d58 	.word	0x00503d58
 8000748:	000080c3 	.word	0x000080c3

0800074c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	2334      	movs	r3, #52	@ 0x34
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	0018      	movs	r0, r3
 8000758:	231c      	movs	r3, #28
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f004 fbf5 	bl	8004f4c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000762:	003b      	movs	r3, r7
 8000764:	0018      	movs	r0, r3
 8000766:	2334      	movs	r3, #52	@ 0x34
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f004 fbee 	bl	8004f4c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000770:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <MX_TIM17_Init+0x104>)
 8000772:	4a38      	ldr	r2, [pc, #224]	@ (8000854 <MX_TIM17_Init+0x108>)
 8000774:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000776:	4b36      	ldr	r3, [pc, #216]	@ (8000850 <MX_TIM17_Init+0x104>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <MX_TIM17_Init+0x104>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1938;
 8000782:	4b33      	ldr	r3, [pc, #204]	@ (8000850 <MX_TIM17_Init+0x104>)
 8000784:	4a34      	ldr	r2, [pc, #208]	@ (8000858 <MX_TIM17_Init+0x10c>)
 8000786:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <MX_TIM17_Init+0x104>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800078e:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <MX_TIM17_Init+0x104>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_TIM17_Init+0x104>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800079a:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <MX_TIM17_Init+0x104>)
 800079c:	0018      	movs	r0, r3
 800079e:	f002 ff99 	bl	80036d4 <HAL_TIM_Base_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 f9bd 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_TIM17_Init+0x104>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 ffe9 	bl	8003784 <HAL_TIM_PWM_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 f9b5 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2134      	movs	r1, #52	@ 0x34
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2260      	movs	r2, #96	@ 0x60
 80007c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e6:	1879      	adds	r1, r7, r1
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_TIM17_Init+0x104>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f003 f907 	bl	8003a00 <HAL_TIM_PWM_ConfigChannel>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80007f6:	f000 f995 	bl	8000b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000800:	003b      	movs	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000806:	003b      	movs	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800080c:	003b      	movs	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000812:	003b      	movs	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000818:	003b      	movs	r3, r7
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	0192      	lsls	r2, r2, #6
 800081e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800082c:	003a      	movs	r2, r7
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_TIM17_Init+0x104>)
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f003 fd28 	bl	8004288 <HAL_TIMEx_ConfigBreakDeadTime>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 800083c:	f000 f972 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <MX_TIM17_Init+0x104>)
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fa8c 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b014      	add	sp, #80	@ 0x50
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000188 	.word	0x20000188
 8000854:	40014800 	.word	0x40014800
 8000858:	00000792 	.word	0x00000792

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 8000862:	4a17      	ldr	r2, [pc, #92]	@ (80008c0 <MX_USART2_UART_Init+0x64>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 8000868:	22e1      	movs	r2, #225	@ 0xe1
 800086a:	0252      	lsls	r2, r2, #9
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x60>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f003 fd8a 	bl	80043c0 <HAL_UART_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f938 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	200001d4 	.word	0x200001d4
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_DMA_Init+0x38>)
 80008cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_DMA_Init+0x38>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	430a      	orrs	r2, r1
 80008d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_DMA_Init+0x38>)
 80008d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2009      	movs	r0, #9
 80008e8:	f001 fb08 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008ec:	2009      	movs	r0, #9
 80008ee:	f001 fb1a 	bl	8001f26 <HAL_NVIC_EnableIRQ>

}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	@ 0x2c
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	2414      	movs	r4, #20
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f004 fb1b 	bl	8004f4c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	4b5c      	ldr	r3, [pc, #368]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091a:	4b5b      	ldr	r3, [pc, #364]	@ (8000a88 <MX_GPIO_Init+0x188>)
 800091c:	2120      	movs	r1, #32
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
 8000922:	4b59      	ldr	r3, [pc, #356]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000926:	2220      	movs	r2, #32
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b56      	ldr	r3, [pc, #344]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000932:	4b55      	ldr	r3, [pc, #340]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	@ 0x34
 800093a:	4b53      	ldr	r3, [pc, #332]	@ (8000a88 <MX_GPIO_Init+0x188>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b50      	ldr	r3, [pc, #320]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a88 <MX_GPIO_Init+0x188>)
 800094c:	2102      	movs	r1, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
 8000952:	4b4d      	ldr	r3, [pc, #308]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000956:	2202      	movs	r2, #2
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000962:	4b49      	ldr	r3, [pc, #292]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000964:	2104      	movs	r1, #4
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	@ 0x34
 800096a:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <MX_GPIO_Init+0x188>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800096e:	2204      	movs	r2, #4
 8000970:	4013      	ands	r3, r2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b44      	ldr	r3, [pc, #272]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097a:	4b43      	ldr	r3, [pc, #268]	@ (8000a88 <MX_GPIO_Init+0x188>)
 800097c:	2108      	movs	r1, #8
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
 8000982:	4b41      	ldr	r3, [pc, #260]	@ (8000a88 <MX_GPIO_Init+0x188>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000986:	2208      	movs	r2, #8
 8000988:	4013      	ands	r3, r2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800098e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a8c <MX_GPIO_Init+0x18c>)
 8000990:	2200      	movs	r2, #0
 8000992:	2102      	movs	r1, #2
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fe99 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 800099a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a90 <MX_GPIO_Init+0x190>)
 800099c:	2200      	movs	r2, #0
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fe93 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_Pin|ZVCHG_Pin|Watchdog_Fault_Pin|Overload_Pin
 80009a6:	23fe      	movs	r3, #254	@ 0xfe
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	483a      	ldr	r0, [pc, #232]	@ (8000a94 <MX_GPIO_Init+0x194>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	0019      	movs	r1, r3
 80009b0:	f001 fe8c 	bl	80026cc <HAL_GPIO_WritePin>
                          |Charge_SC_Pin|Discharge_SC_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2202      	movs	r2, #2
 80009b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2201      	movs	r2, #1
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	4a2f      	ldr	r2, [pc, #188]	@ (8000a8c <MX_GPIO_Init+0x18c>)
 80009d0:	0019      	movs	r1, r3
 80009d2:	0010      	movs	r0, r2
 80009d4:	f001 fd16 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : Alert_EXTI_Pin */
  GPIO_InitStruct.Pin = Alert_EXTI_Pin;
 80009d8:	0021      	movs	r1, r4
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	0192      	lsls	r2, r2, #6
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2284      	movs	r2, #132	@ 0x84
 80009e6:	0392      	lsls	r2, r2, #14
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Alert_EXTI_GPIO_Port, &GPIO_InitStruct);
 80009f0:	000c      	movs	r4, r1
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	4a27      	ldr	r2, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0x194>)
 80009f6:	0019      	movs	r1, r3
 80009f8:	0010      	movs	r0, r2
 80009fa:	f001 fd03 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Wakeup_Pin */
  GPIO_InitStruct.Pin = Manual_Wakeup_Pin;
 80009fe:	0021      	movs	r1, r4
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	01d2      	lsls	r2, r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2288      	movs	r2, #136	@ 0x88
 8000a0c:	0352      	lsls	r2, r2, #13
 8000a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	000c      	movs	r4, r1
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Manual_Wakeup_GPIO_Port, &GPIO_InitStruct);
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a94 <MX_GPIO_Init+0x194>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f001 fcf0 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_Pin */
  GPIO_InitStruct.Pin = temp_Pin;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	4a14      	ldr	r2, [pc, #80]	@ (8000a90 <MX_GPIO_Init+0x190>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f001 fcde 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : Status_LED_Pin ZVCHG_Pin Watchdog_Fault_Pin Overload_Pin
                           Charge_SC_Pin Discharge_SC_Pin LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin|ZVCHG_Pin|Watchdog_Fault_Pin|Overload_Pin
 8000a48:	0021      	movs	r1, r4
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	22fe      	movs	r2, #254	@ 0xfe
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	601a      	str	r2, [r3, #0]
                          |Charge_SC_Pin|Discharge_SC_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2201      	movs	r2, #1
 8000a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <MX_GPIO_Init+0x194>)
 8000a68:	0019      	movs	r1, r3
 8000a6a:	0010      	movs	r0, r2
 8000a6c:	f001 fcca 	bl	8002404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2007      	movs	r0, #7
 8000a76:	f001 fa41 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f001 fa53 	bl	8001f26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b00b      	add	sp, #44	@ 0x2c
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	50001400 	.word	0x50001400
 8000a90:	50000800 	.word	0x50000800
 8000a94:	50000400 	.word	0x50000400

08000a98 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount);
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	4904      	ldr	r1, [pc, #16]	@ (8000ab8 <HAL_ADC_ConvCpltCallback+0x20>)
 8000aa6:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_ADC_ConvCpltCallback+0x24>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fdf1 	bl	8001690 <HAL_ADC_Start_DMA>
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	20000268 	.word	0x20000268
 8000abc:	20000078 	.word	0x20000078

08000ac0 <HAL_GPIO_EXTI_Falling_Callback>:

int counter = 0;

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b093      	sub	sp, #76	@ 0x4c
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	801a      	strh	r2, [r3, #0]
	  if(GPIO_Pin == Alert_EXTI_Pin) {
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	881a      	ldrh	r2, [r3, #0]
 8000ad0:	2380      	movs	r3, #128	@ 0x80
 8000ad2:	019b      	lsls	r3, r3, #6
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d119      	bne.n	8000b0c <HAL_GPIO_EXTI_Falling_Callback+0x4c>
		  char m[60];
		  sprintf(m, "Interrupt: %d\r\n", counter);
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	490f      	ldr	r1, [pc, #60]	@ (8000b1c <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000ade:	240c      	movs	r4, #12
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f004 fa12 	bl	8004f0c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) m, strlen(m), HAL_MAX_DELAY);
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff fb0c 	bl	8000108 <strlen>
 8000af0:	0003      	movs	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	2301      	movs	r3, #1
 8000af6:	425b      	negs	r3, r3
 8000af8:	1939      	adds	r1, r7, r4
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8000afc:	f003 fcb6 	bl	800446c <HAL_UART_Transmit>
		  counter+=1;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000b08:	601a      	str	r2, [r3, #0]
	  } else {
	      __NOP();
	  }
}
 8000b0a:	e000      	b.n	8000b0e <HAL_GPIO_EXTI_Falling_Callback+0x4e>
	      __NOP();
 8000b0c:	46c0      	nop			@ (mov r8, r8)
}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b013      	add	sp, #76	@ 0x4c
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	20000270 	.word	0x20000270
 8000b1c:	0800586c 	.word	0x0800586c
 8000b20:	200001d4 	.word	0x200001d4

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0549      	lsls	r1, r1, #21
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	055b      	lsls	r3, r3, #21
 8000b64:	4013      	ands	r3, r2
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	@ 0x2c
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2414      	movs	r4, #20
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f004 f9de 	bl	8004f4c <memset>
  if(hadc->Instance==ADC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a2d      	ldr	r2, [pc, #180]	@ (8000c4c <HAL_ADC_MspInit+0xd4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d154      	bne.n	8000c44 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <HAL_ADC_MspInit+0xd8>)
 8000b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <HAL_ADC_MspInit+0xd8>)
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	0349      	lsls	r1, r1, #13
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <HAL_ADC_MspInit+0xd8>)
 8000baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	035b      	lsls	r3, r3, #13
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <HAL_ADC_MspInit+0xd8>)
 8000bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <HAL_ADC_MspInit+0xd8>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bc2:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <HAL_ADC_MspInit+0xd8>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = Thermistor_Pin|Cell__Pin|Cell___Pin;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	22e0      	movs	r2, #224	@ 0xe0
 8000bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	193a      	adds	r2, r7, r4
 8000be2:	23a0      	movs	r3, #160	@ 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 fc0b 	bl	8002404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000bf0:	4a19      	ldr	r2, [pc, #100]	@ (8000c58 <HAL_ADC_MspInit+0xe0>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c08:	2280      	movs	r2, #128	@ 0x80
 8000c0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	0052      	lsls	r2, r2, #1
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	00d2      	lsls	r2, r2, #3
 8000c1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 f998 	bl	8001f60 <HAL_DMA_Init>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c34:	f7ff ff76 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_ADC_MspInit+0xdc>)
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b00b      	add	sp, #44	@ 0x2c
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	40012400 	.word	0x40012400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	200000dc 	.word	0x200000dc
 8000c58:	40020008 	.word	0x40020008

08000c5c <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b095      	sub	sp, #84	@ 0x54
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	233c      	movs	r3, #60	@ 0x3c
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f004 f96c 	bl	8004f4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	2410      	movs	r4, #16
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	232c      	movs	r3, #44	@ 0x2c
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f004 f964 	bl	8004f4c <memset>
  if(hsmbus->Instance==I2C1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <HAL_SMBUS_MspInit+0xbc>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d13f      	bne.n	8000d0e <HAL_SMBUS_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2220      	movs	r2, #32
 8000c92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f002 fa77 	bl	8003190 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000ca6:	f7ff ff3d 	bl	8000b24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_SMBUS_MspInit+0xc0>)
 8000cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_SMBUS_MspInit+0xc0>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cb6:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_SMBUS_MspInit+0xc0>)
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc2:	213c      	movs	r1, #60	@ 0x3c
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	22c0      	movs	r2, #192	@ 0xc0
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2212      	movs	r2, #18
 8000cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2206      	movs	r2, #6
 8000ce2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	187a      	adds	r2, r7, r1
 8000ce6:	23a0      	movs	r3, #160	@ 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	0011      	movs	r1, r2
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fb89 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_SMBUS_MspInit+0xc0>)
 8000cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_SMBUS_MspInit+0xc0>)
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	0389      	lsls	r1, r1, #14
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_SMBUS_MspInit+0xc0>)
 8000d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d04:	2380      	movs	r3, #128	@ 0x80
 8000d06:	039b      	lsls	r3, r3, #14
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b015      	add	sp, #84	@ 0x54
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <HAL_TIM_Base_MspInit+0x38>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10d      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_TIM_Base_MspInit+0x3c>)
 8000d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_TIM_Base_MspInit+0x3c>)
 8000d38:	2180      	movs	r1, #128	@ 0x80
 8000d3a:	02c9      	lsls	r1, r1, #11
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_TIM_Base_MspInit+0x3c>)
 8000d42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	02db      	lsls	r3, r3, #11
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	40014800 	.word	0x40014800
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	240c      	movs	r4, #12
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2314      	movs	r3, #20
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f004 f8ea 	bl	8004f4c <memset>
  if(htim->Instance==TIM17)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <HAL_TIM_MspPostInit+0x70>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d121      	bne.n	8000dc6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_TIM_MspPostInit+0x74>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <HAL_TIM_MspPostInit+0x74>)
 8000d88:	2108      	movs	r1, #8
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <HAL_TIM_MspPostInit+0x74>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d92:	2208      	movs	r2, #8
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PD1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = _33kHz_Pin;
 8000d9a:	0021      	movs	r1, r4
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2202      	movs	r2, #2
 8000da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2202      	movs	r2, #2
 8000db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(_33kHz_GPIO_Port, &GPIO_InitStruct);
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_TIM_MspPostInit+0x78>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f001 fb1f 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b009      	add	sp, #36	@ 0x24
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	40014800 	.word	0x40014800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	50000c00 	.word	0x50000c00

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b08b      	sub	sp, #44	@ 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	2414      	movs	r4, #20
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	0018      	movs	r0, r3
 8000dea:	2314      	movs	r3, #20
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f004 f8ac 	bl	8004f4c <memset>
  if(huart->Instance==USART2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <HAL_UART_MspInit+0x8c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d130      	bne.n	8000e60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <HAL_UART_MspInit+0x90>)
 8000e00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e02:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <HAL_UART_MspInit+0x90>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	0289      	lsls	r1, r1, #10
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <HAL_UART_MspInit+0x90>)
 8000e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <HAL_UART_MspInit+0x90>)
 8000e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <HAL_UART_MspInit+0x90>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <HAL_UART_MspInit+0x90>)
 8000e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e32:	0021      	movs	r1, r4
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	187a      	adds	r2, r7, r1
 8000e54:	23a0      	movs	r3, #160	@ 0xa0
 8000e56:	05db      	lsls	r3, r3, #23
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 fad2 	bl	8002404 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b00b      	add	sp, #44	@ 0x2c
 8000e66:	bd90      	pop	{r4, r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40021000 	.word	0x40021000

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	e7fd      	b.n	8000e74 <NMI_Handler+0x4>

08000e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	e7fd      	b.n	8000e7c <HardFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f8ee 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert_EXTI_Pin);
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 fc2c 	bl	8002708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Manual_Wakeup_Pin);
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	01db      	lsls	r3, r3, #7
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 fc27 	bl	8002708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <DMA1_Channel1_IRQHandler+0x14>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f001 f95a 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	200000dc 	.word	0x200000dc

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f004 f828 	bl	8004f5c <__errno>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	18d2      	adds	r2, r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <_sbrk+0x64>)
 8000f28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b006      	add	sp, #24
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20002000 	.word	0x20002000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	20000274 	.word	0x20000274
 8000f40:	200003c8 	.word	0x200003c8

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f50:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f54:	f7ff fff6 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5a:	490d      	ldr	r1, [pc, #52]	@ (8000f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <LoopForever+0xe>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f70:	4c0a      	ldr	r4, [pc, #40]	@ (8000f9c <LoopForever+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f7e:	f003 fff3 	bl	8004f68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f82:	f7ff fa75 	bl	8000470 <main>

08000f86 <LoopForever>:

LoopForever:
  b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
  ldr   r0, =_estack
 8000f88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f94:	0800598c 	.word	0x0800598c
  ldr r2, =_sbss
 8000f98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f9c:	200003c4 	.word	0x200003c4

08000fa0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_Init+0x3c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_Init+0x3c>)
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	0049      	lsls	r1, r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f000 f810 	bl	8000fe4 <HAL_InitTick>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e001      	b.n	8000fd4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fdae 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <HAL_InitTick+0x88>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d02b      	beq.n	8001054 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <HAL_InitTick+0x8c>)
 8000ffe:	681c      	ldr	r4, [r3, #0]
 8001000:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <HAL_InitTick+0x88>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	0019      	movs	r1, r3
 8001006:	23fa      	movs	r3, #250	@ 0xfa
 8001008:	0098      	lsls	r0, r3, #2
 800100a:	f7ff f88f 	bl	800012c <__udivsi3>
 800100e:	0003      	movs	r3, r0
 8001010:	0019      	movs	r1, r3
 8001012:	0020      	movs	r0, r4
 8001014:	f7ff f88a 	bl	800012c <__udivsi3>
 8001018:	0003      	movs	r3, r0
 800101a:	0018      	movs	r0, r3
 800101c:	f000 ff93 	bl	8001f46 <HAL_SYSTICK_Config>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d112      	bne.n	800104a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d80a      	bhi.n	8001040 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	2301      	movs	r3, #1
 800102e:	425b      	negs	r3, r3
 8001030:	2200      	movs	r2, #0
 8001032:	0018      	movs	r0, r3
 8001034:	f000 ff62 	bl	8001efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_InitTick+0x90>)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e00d      	b.n	800105c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001040:	230f      	movs	r3, #15
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e008      	b.n	800105c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800104a:	230f      	movs	r3, #15
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e003      	b.n	800105c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	781b      	ldrb	r3, [r3, #0]
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b005      	add	sp, #20
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	20000008 	.word	0x20000008
 8001070:	20000000 	.word	0x20000000
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_IncTick+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	001a      	movs	r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_IncTick+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	18d2      	adds	r2, r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <HAL_IncTick+0x20>)
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	20000008 	.word	0x20000008
 8001098:	20000278 	.word	0x20000278

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b02      	ldr	r3, [pc, #8]	@ (80010ac <HAL_GetTick+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	20000278 	.word	0x20000278

080010b0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010c0:	401a      	ands	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	fe3fffff 	.word	0xfe3fffff

080010d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	23e0      	movs	r3, #224	@ 0xe0
 80010e6:	045b      	lsls	r3, r3, #17
 80010e8:	4013      	ands	r3, r2
}
 80010ea:	0018      	movs	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	2104      	movs	r1, #4
 8001106:	400a      	ands	r2, r1
 8001108:	2107      	movs	r1, #7
 800110a:	4091      	lsls	r1, r2
 800110c:	000a      	movs	r2, r1
 800110e:	43d2      	mvns	r2, r2
 8001110:	401a      	ands	r2, r3
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2104      	movs	r1, #4
 8001116:	400b      	ands	r3, r1
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4099      	lsls	r1, r3
 800111c:	000b      	movs	r3, r1
 800111e:	431a      	orrs	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b004      	add	sp, #16
 800112a:	bd80      	pop	{r7, pc}

0800112c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	2104      	movs	r1, #4
 800113e:	400a      	ands	r2, r1
 8001140:	2107      	movs	r1, #7
 8001142:	4091      	lsls	r1, r2
 8001144:	000a      	movs	r2, r1
 8001146:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2104      	movs	r1, #4
 800114c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800114e:	40da      	lsrs	r2, r3
 8001150:	0013      	movs	r3, r2
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}

0800115a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	23c0      	movs	r3, #192	@ 0xc0
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4013      	ands	r3, r2
 800116c:	d101      	bne.n	8001172 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001172:	2300      	movs	r3, #0
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}

0800117c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	211f      	movs	r1, #31
 8001190:	400a      	ands	r2, r1
 8001192:	210f      	movs	r1, #15
 8001194:	4091      	lsls	r1, r2
 8001196:	000a      	movs	r2, r1
 8001198:	43d2      	mvns	r2, r2
 800119a:	401a      	ands	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	0e9b      	lsrs	r3, r3, #26
 80011a0:	210f      	movs	r1, #15
 80011a2:	4019      	ands	r1, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	201f      	movs	r0, #31
 80011a8:	4003      	ands	r3, r0
 80011aa:	4099      	lsls	r1, r3
 80011ac:	000b      	movs	r3, r1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b004      	add	sp, #16
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	035b      	lsls	r3, r3, #13
 80011ce:	0b5b      	lsrs	r3, r3, #13
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}

080011de <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	0352      	lsls	r2, r2, #13
 80011f0:	0b52      	lsrs	r2, r2, #13
 80011f2:	43d2      	mvns	r2, r2
 80011f4:	401a      	ands	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	0212      	lsls	r2, r2, #8
 8001218:	43d2      	mvns	r2, r2
 800121a:	401a      	ands	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	400b      	ands	r3, r1
 8001224:	4904      	ldr	r1, [pc, #16]	@ (8001238 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	07ffff00 	.word	0x07ffff00

0800123c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <LL_ADC_EnableInternalRegulator+0x24>)
 800124a:	4013      	ands	r3, r2
 800124c:	2280      	movs	r2, #128	@ 0x80
 800124e:	0552      	lsls	r2, r2, #21
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	6fffffe8 	.word	0x6fffffe8

08001264 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	055b      	lsls	r3, r3, #21
 8001274:	401a      	ands	r2, r3
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	055b      	lsls	r3, r3, #21
 800127a:	429a      	cmp	r2, r3
 800127c:	d101      	bne.n	8001282 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001282:	2300      	movs	r3, #0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <LL_ADC_Enable+0x20>)
 800129a:	4013      	ands	r3, r2
 800129c:	2201      	movs	r2, #1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	7fffffe8 	.word	0x7fffffe8

080012b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <LL_ADC_Disable+0x20>)
 80012be:	4013      	ands	r3, r2
 80012c0:	2202      	movs	r2, #2
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	7fffffe8 	.word	0x7fffffe8

080012d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <LL_ADC_IsEnabled+0x18>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <LL_ADC_IsEnabled+0x1a>
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <LL_ADC_REG_StartConversion+0x20>)
 8001306:	4013      	ands	r3, r2
 8001308:	2204      	movs	r2, #4
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001310:	46c0      	nop			@ (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}
 8001318:	7fffffe8 	.word	0x7fffffe8

0800131c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2204      	movs	r2, #4
 800132a:	4013      	ands	r3, r2
 800132c:	2b04      	cmp	r3, #4
 800132e:	d101      	bne.n	8001334 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	231f      	movs	r3, #31
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e17f      	b.n	8001666 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff fc01 	bl	8000b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2254      	movs	r2, #84	@ 0x54
 8001380:	2100      	movs	r1, #0
 8001382:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff6b 	bl	8001264 <LL_ADC_IsInternalRegulatorEnabled>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d115      	bne.n	80013be <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff ff50 	bl	800123c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800139c:	4bb4      	ldr	r3, [pc, #720]	@ (8001670 <HAL_ADC_Init+0x330>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	49b4      	ldr	r1, [pc, #720]	@ (8001674 <HAL_ADC_Init+0x334>)
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7fe fec2 	bl	800012c <__udivsi3>
 80013a8:	0003      	movs	r3, r0
 80013aa:	3301      	adds	r3, #1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013b0:	e002      	b.n	80013b8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7ff ff4e 	bl	8001264 <LL_ADC_IsInternalRegulatorEnabled>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d10f      	bne.n	80013ec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d0:	2210      	movs	r2, #16
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013dc:	2201      	movs	r2, #1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80013e4:	231f      	movs	r3, #31
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ff93 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 80013f6:	0003      	movs	r3, r0
 80013f8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	2210      	movs	r2, #16
 8001400:	4013      	ands	r3, r2
 8001402:	d000      	beq.n	8001406 <HAL_ADC_Init+0xc6>
 8001404:	e122      	b.n	800164c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d000      	beq.n	800140e <HAL_ADC_Init+0xce>
 800140c:	e11e      	b.n	800164c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	4a99      	ldr	r2, [pc, #612]	@ (8001678 <HAL_ADC_Init+0x338>)
 8001414:	4013      	ands	r3, r2
 8001416:	2202      	movs	r2, #2
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff ff56 	bl	80012d4 <LL_ADC_IsEnabled>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d000      	beq.n	800142e <HAL_ADC_Init+0xee>
 800142c:	e0ad      	b.n	800158a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7e1b      	ldrb	r3, [r3, #24]
 8001436:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001438:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7e5b      	ldrb	r3, [r3, #25]
 800143e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001440:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e9b      	ldrb	r3, [r3, #26]
 8001446:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001448:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_ADC_Init+0x118>
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	015b      	lsls	r3, r3, #5
 8001456:	e000      	b.n	800145a <HAL_ADC_Init+0x11a>
 8001458:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800145a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001460:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da04      	bge.n	8001474 <HAL_ADC_Init+0x134>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	e001      	b.n	8001478 <HAL_ADC_Init+0x138>
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001478:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	212c      	movs	r1, #44	@ 0x2c
 800147e:	5c5b      	ldrb	r3, [r3, r1]
 8001480:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001482:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2220      	movs	r2, #32
 800148e:	5c9b      	ldrb	r3, [r3, r2]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d115      	bne.n	80014c0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e9b      	ldrb	r3, [r3, #26]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2280      	movs	r2, #128	@ 0x80
 80014a0:	0252      	lsls	r2, r2, #9
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	e00b      	b.n	80014c0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	2220      	movs	r2, #32
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b8:	2201      	movs	r2, #1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00a      	beq.n	80014de <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014cc:	23e0      	movs	r3, #224	@ 0xe0
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014d6:	4313      	orrs	r3, r2
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a65      	ldr	r2, [pc, #404]	@ (800167c <HAL_ADC_Init+0x33c>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	0f9b      	lsrs	r3, r3, #30
 80014fa:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001500:	4313      	orrs	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	223c      	movs	r2, #60	@ 0x3c
 800150c:	5c9b      	ldrb	r3, [r3, r2]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d111      	bne.n	8001536 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	0f9b      	lsrs	r3, r3, #30
 8001518:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800151e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001524:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800152a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	4313      	orrs	r3, r2
 8001530:	2201      	movs	r2, #1
 8001532:	4313      	orrs	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a50      	ldr	r2, [pc, #320]	@ (8001680 <HAL_ADC_Init+0x340>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	430a      	orrs	r2, r1
 800154a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	23c0      	movs	r3, #192	@ 0xc0
 8001552:	061b      	lsls	r3, r3, #24
 8001554:	429a      	cmp	r2, r3
 8001556:	d018      	beq.n	800158a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	05db      	lsls	r3, r3, #23
 8001560:	429a      	cmp	r2, r3
 8001562:	d012      	beq.n	800158a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	061b      	lsls	r3, r3, #24
 800156c:	429a      	cmp	r2, r3
 800156e:	d00c      	beq.n	800158a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001570:	4b44      	ldr	r3, [pc, #272]	@ (8001684 <HAL_ADC_Init+0x344>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a44      	ldr	r2, [pc, #272]	@ (8001688 <HAL_ADC_Init+0x348>)
 8001576:	4013      	ands	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	23f0      	movs	r3, #240	@ 0xf0
 8001580:	039b      	lsls	r3, r3, #14
 8001582:	401a      	ands	r2, r3
 8001584:	4b3f      	ldr	r3, [pc, #252]	@ (8001684 <HAL_ADC_Init+0x344>)
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001592:	001a      	movs	r2, r3
 8001594:	2100      	movs	r1, #0
 8001596:	f7ff fdac 	bl	80010f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a2:	493a      	ldr	r1, [pc, #232]	@ (800168c <HAL_ADC_Init+0x34c>)
 80015a4:	001a      	movs	r2, r3
 80015a6:	f7ff fda4 	bl	80010f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2110      	movs	r1, #16
 80015be:	4249      	negs	r1, r1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80015c4:	e018      	b.n	80015f8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	039b      	lsls	r3, r3, #14
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d112      	bne.n	80015f8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	3b01      	subs	r3, #1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	221c      	movs	r2, #28
 80015e2:	4013      	ands	r3, r2
 80015e4:	2210      	movs	r2, #16
 80015e6:	4252      	negs	r2, r2
 80015e8:	409a      	lsls	r2, r3
 80015ea:	0011      	movs	r1, r2
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2100      	movs	r1, #0
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fd94 	bl	800112c <LL_ADC_GetSamplingTimeCommonChannels>
 8001604:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800160a:	429a      	cmp	r2, r3
 800160c:	d10b      	bne.n	8001626 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	2203      	movs	r2, #3
 800161a:	4393      	bics	r3, r2
 800161c:	2201      	movs	r2, #1
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001624:	e01c      	b.n	8001660 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	2212      	movs	r2, #18
 800162c:	4393      	bics	r3, r2
 800162e:	2210      	movs	r2, #16
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163a:	2201      	movs	r2, #1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001642:	231f      	movs	r3, #31
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800164a:	e009      	b.n	8001660 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	2210      	movs	r2, #16
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001658:	231f      	movs	r3, #31
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001660:	231f      	movs	r3, #31
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	781b      	ldrb	r3, [r3, #0]
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b008      	add	sp, #32
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	20000000 	.word	0x20000000
 8001674:	00030d40 	.word	0x00030d40
 8001678:	fffffefd 	.word	0xfffffefd
 800167c:	ffde0201 	.word	0xffde0201
 8001680:	1ffffc02 	.word	0x1ffffc02
 8001684:	40012708 	.word	0x40012708
 8001688:	ffc3ffff 	.word	0xffc3ffff
 800168c:	07ffff04 	.word	0x07ffff04

08001690 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fe3b 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d16c      	bne.n	8001784 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2254      	movs	r2, #84	@ 0x54
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_Start_DMA+0x28>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e06c      	b.n	8001792 <HAL_ADC_Start_DMA+0x102>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2254      	movs	r2, #84	@ 0x54
 80016bc:	2101      	movs	r1, #1
 80016be:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d113      	bne.n	80016f4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff fdff 	bl	80012d4 <LL_ADC_IsEnabled>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d004      	beq.n	80016e4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fde6 	bl	80012b0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016f4:	2517      	movs	r5, #23
 80016f6:	197c      	adds	r4, r7, r5
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 fa3e 	bl	8001b7c <ADC_Enable>
 8001700:	0003      	movs	r3, r0
 8001702:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001704:	002c      	movs	r4, r5
 8001706:	193b      	adds	r3, r7, r4
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d13e      	bne.n	800178c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	4a22      	ldr	r2, [pc, #136]	@ (800179c <HAL_ADC_Start_DMA+0x10c>)
 8001714:	4013      	ands	r3, r2
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	0052      	lsls	r2, r2, #1
 800171a:	431a      	orrs	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800172a:	4a1d      	ldr	r2, [pc, #116]	@ (80017a0 <HAL_ADC_Start_DMA+0x110>)
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001732:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <HAL_ADC_Start_DMA+0x114>)
 8001734:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173a:	4a1b      	ldr	r2, [pc, #108]	@ (80017a8 <HAL_ADC_Start_DMA+0x118>)
 800173c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	221c      	movs	r2, #28
 8001744:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2254      	movs	r2, #84	@ 0x54
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2110      	movs	r1, #16
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3340      	adds	r3, #64	@ 0x40
 8001768:	0019      	movs	r1, r3
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	193c      	adds	r4, r7, r4
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f000 fc80 	bl	8002074 <HAL_DMA_Start_IT>
 8001774:	0003      	movs	r3, r0
 8001776:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fdbb 	bl	80012f8 <LL_ADC_REG_StartConversion>
 8001782:	e003      	b.n	800178c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001784:	2317      	movs	r3, #23
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2202      	movs	r2, #2
 800178a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800178c:	2317      	movs	r3, #23
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	781b      	ldrb	r3, [r3, #0]
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b006      	add	sp, #24
 8001798:	bdb0      	pop	{r4, r5, r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	fffff0fe 	.word	0xfffff0fe
 80017a0:	08001c89 	.word	0x08001c89
 80017a4:	08001d51 	.word	0x08001d51
 80017a8:	08001d6f 	.word	0x08001d6f

080017ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b002      	add	sp, #8
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d6:	2317      	movs	r3, #23
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2254      	movs	r2, #84	@ 0x54
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x24>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e1c0      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x3a6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2254      	movs	r2, #84	@ 0x54
 80017f4:	2101      	movs	r1, #1
 80017f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff fd8d 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d000      	beq.n	8001808 <HAL_ADC_ConfigChannel+0x3c>
 8001806:	e1a3      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d100      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x46>
 8001810:	e143      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	429a      	cmp	r2, r3
 800181c:	d004      	beq.n	8001828 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001822:	4ac1      	ldr	r2, [pc, #772]	@ (8001b28 <HAL_ADC_ConfigChannel+0x35c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d108      	bne.n	800183a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0019      	movs	r1, r3
 8001832:	0010      	movs	r0, r2
 8001834:	f7ff fcc2 	bl	80011bc <LL_ADC_REG_SetSequencerChAdd>
 8001838:	e0c9      	b.n	80019ce <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	211f      	movs	r1, #31
 8001844:	400b      	ands	r3, r1
 8001846:	210f      	movs	r1, #15
 8001848:	4099      	lsls	r1, r3
 800184a:	000b      	movs	r3, r1
 800184c:	43db      	mvns	r3, r3
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	035b      	lsls	r3, r3, #13
 8001858:	0b5b      	lsrs	r3, r3, #13
 800185a:	d105      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x9c>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	221f      	movs	r2, #31
 8001864:	4013      	ands	r3, r2
 8001866:	e098      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2201      	movs	r2, #1
 800186e:	4013      	ands	r3, r2
 8001870:	d000      	beq.n	8001874 <HAL_ADC_ConfigChannel+0xa8>
 8001872:	e091      	b.n	8001998 <HAL_ADC_ConfigChannel+0x1cc>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2202      	movs	r2, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d000      	beq.n	8001880 <HAL_ADC_ConfigChannel+0xb4>
 800187e:	e089      	b.n	8001994 <HAL_ADC_ConfigChannel+0x1c8>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2204      	movs	r2, #4
 8001886:	4013      	ands	r3, r2
 8001888:	d000      	beq.n	800188c <HAL_ADC_ConfigChannel+0xc0>
 800188a:	e081      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1c4>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2208      	movs	r2, #8
 8001892:	4013      	ands	r3, r2
 8001894:	d000      	beq.n	8001898 <HAL_ADC_ConfigChannel+0xcc>
 8001896:	e079      	b.n	800198c <HAL_ADC_ConfigChannel+0x1c0>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
 80018a0:	d000      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0xd8>
 80018a2:	e071      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1bc>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2220      	movs	r2, #32
 80018aa:	4013      	ands	r3, r2
 80018ac:	d000      	beq.n	80018b0 <HAL_ADC_ConfigChannel+0xe4>
 80018ae:	e069      	b.n	8001984 <HAL_ADC_ConfigChannel+0x1b8>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2240      	movs	r2, #64	@ 0x40
 80018b6:	4013      	ands	r3, r2
 80018b8:	d000      	beq.n	80018bc <HAL_ADC_ConfigChannel+0xf0>
 80018ba:	e061      	b.n	8001980 <HAL_ADC_ConfigChannel+0x1b4>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	4013      	ands	r3, r2
 80018c4:	d000      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0xfc>
 80018c6:	e059      	b.n	800197c <HAL_ADC_ConfigChannel+0x1b0>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	d151      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1ac>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4013      	ands	r3, r2
 80018de:	d149      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x1a8>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4013      	ands	r3, r2
 80018ea:	d141      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1a4>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	4013      	ands	r3, r2
 80018f6:	d139      	bne.n	800196c <HAL_ADC_ConfigChannel+0x1a0>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	4013      	ands	r3, r2
 8001902:	d131      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x19c>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	019b      	lsls	r3, r3, #6
 800190c:	4013      	ands	r3, r2
 800190e:	d129      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x198>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	01db      	lsls	r3, r3, #7
 8001918:	4013      	ands	r3, r2
 800191a:	d121      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x194>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	4013      	ands	r3, r2
 8001926:	d119      	bne.n	800195c <HAL_ADC_ConfigChannel+0x190>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	4013      	ands	r3, r2
 8001932:	d111      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x18c>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	029b      	lsls	r3, r3, #10
 800193c:	4013      	ands	r3, r2
 800193e:	d109      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x188>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	02db      	lsls	r3, r3, #11
 8001948:	4013      	ands	r3, r2
 800194a:	d001      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x184>
 800194c:	2312      	movs	r3, #18
 800194e:	e024      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001950:	2300      	movs	r3, #0
 8001952:	e022      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001954:	2311      	movs	r3, #17
 8001956:	e020      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001958:	2310      	movs	r3, #16
 800195a:	e01e      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 800195c:	230f      	movs	r3, #15
 800195e:	e01c      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001960:	230e      	movs	r3, #14
 8001962:	e01a      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001964:	230d      	movs	r3, #13
 8001966:	e018      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001968:	230c      	movs	r3, #12
 800196a:	e016      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 800196c:	230b      	movs	r3, #11
 800196e:	e014      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001970:	230a      	movs	r3, #10
 8001972:	e012      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001974:	2309      	movs	r3, #9
 8001976:	e010      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001978:	2308      	movs	r3, #8
 800197a:	e00e      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 800197c:	2307      	movs	r3, #7
 800197e:	e00c      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001980:	2306      	movs	r3, #6
 8001982:	e00a      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001984:	2305      	movs	r3, #5
 8001986:	e008      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001988:	2304      	movs	r3, #4
 800198a:	e006      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 800198c:	2303      	movs	r3, #3
 800198e:	e004      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001990:	2302      	movs	r3, #2
 8001992:	e002      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_ADC_ConfigChannel+0x1ce>
 8001998:	2300      	movs	r3, #0
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	6852      	ldr	r2, [r2, #4]
 800199e:	201f      	movs	r0, #31
 80019a0:	4002      	ands	r2, r0
 80019a2:	4093      	lsls	r3, r2
 80019a4:	000a      	movs	r2, r1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d808      	bhi.n	80019ce <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	001a      	movs	r2, r3
 80019ca:	f7ff fbd7 	bl	800117c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	001a      	movs	r2, r3
 80019dc:	f7ff fc12 	bl	8001204 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db00      	blt.n	80019ea <HAL_ADC_ConfigChannel+0x21e>
 80019e8:	e0bc      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019ea:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fb73 	bl	80010d8 <LL_ADC_GetCommonPathInternalCh>
 80019f2:	0003      	movs	r3, r0
 80019f4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001b30 <HAL_ADC_ConfigChannel+0x364>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d122      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a08:	d11d      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2280      	movs	r2, #128	@ 0x80
 8001a0e:	0412      	lsls	r2, r2, #16
 8001a10:	4313      	orrs	r3, r2
 8001a12:	4a46      	ldr	r2, [pc, #280]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 8001a14:	0019      	movs	r1, r3
 8001a16:	0010      	movs	r0, r2
 8001a18:	f7ff fb4a 	bl	80010b0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a1c:	4b45      	ldr	r3, [pc, #276]	@ (8001b34 <HAL_ADC_ConfigChannel+0x368>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4945      	ldr	r1, [pc, #276]	@ (8001b38 <HAL_ADC_ConfigChannel+0x36c>)
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7fe fb82 	bl	800012c <__udivsi3>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a36:	e002      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f9      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a44:	e08e      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b3c <HAL_ADC_ConfigChannel+0x370>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d10e      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	2380      	movs	r3, #128	@ 0x80
 8001a54:	045b      	lsls	r3, r3, #17
 8001a56:	4013      	ands	r3, r2
 8001a58:	d109      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	0452      	lsls	r2, r2, #17
 8001a60:	4313      	orrs	r3, r2
 8001a62:	4a32      	ldr	r2, [pc, #200]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 8001a64:	0019      	movs	r1, r3
 8001a66:	0010      	movs	r0, r2
 8001a68:	f7ff fb22 	bl	80010b0 <LL_ADC_SetCommonPathInternalCh>
 8001a6c:	e07a      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a33      	ldr	r2, [pc, #204]	@ (8001b40 <HAL_ADC_ConfigChannel+0x374>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d000      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x2ae>
 8001a78:	e074      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	03db      	lsls	r3, r3, #15
 8001a80:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a82:	d000      	beq.n	8001a86 <HAL_ADC_ConfigChannel+0x2ba>
 8001a84:	e06e      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2280      	movs	r2, #128	@ 0x80
 8001a8a:	03d2      	lsls	r2, r2, #15
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	4a27      	ldr	r2, [pc, #156]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 8001a90:	0019      	movs	r1, r3
 8001a92:	0010      	movs	r0, r2
 8001a94:	f7ff fb0c 	bl	80010b0 <LL_ADC_SetCommonPathInternalCh>
 8001a98:	e064      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d004      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_ADC_ConfigChannel+0x35c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d107      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0019      	movs	r1, r3
 8001aba:	0010      	movs	r0, r2
 8001abc:	f7ff fb8f 	bl	80011de <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da4d      	bge.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff fb04 	bl	80010d8 <LL_ADC_GetCommonPathInternalCh>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <HAL_ADC_ConfigChannel+0x364>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d108      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <HAL_ADC_ConfigChannel+0x378>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	0010      	movs	r0, r2
 8001aea:	f7ff fae1 	bl	80010b0 <LL_ADC_SetCommonPathInternalCh>
 8001aee:	e039      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a11      	ldr	r2, [pc, #68]	@ (8001b3c <HAL_ADC_ConfigChannel+0x370>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d108      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <HAL_ADC_ConfigChannel+0x37c>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 8001b02:	0019      	movs	r1, r3
 8001b04:	0010      	movs	r0, r2
 8001b06:	f7ff fad3 	bl	80010b0 <LL_ADC_SetCommonPathInternalCh>
 8001b0a:	e02b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0b      	ldr	r2, [pc, #44]	@ (8001b40 <HAL_ADC_ConfigChannel+0x374>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d126      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4a0c      	ldr	r2, [pc, #48]	@ (8001b4c <HAL_ADC_ConfigChannel+0x380>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	4a03      	ldr	r2, [pc, #12]	@ (8001b2c <HAL_ADC_ConfigChannel+0x360>)
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f7ff fac5 	bl	80010b0 <LL_ADC_SetCommonPathInternalCh>
 8001b26:	e01d      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x398>
 8001b28:	80000004 	.word	0x80000004
 8001b2c:	40012708 	.word	0x40012708
 8001b30:	b0001000 	.word	0xb0001000
 8001b34:	20000000 	.word	0x20000000
 8001b38:	00030d40 	.word	0x00030d40
 8001b3c:	b8004000 	.word	0xb8004000
 8001b40:	b4002000 	.word	0xb4002000
 8001b44:	ff7fffff 	.word	0xff7fffff
 8001b48:	feffffff 	.word	0xfeffffff
 8001b4c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b54:	2220      	movs	r2, #32
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b5c:	2317      	movs	r3, #23
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2254      	movs	r2, #84	@ 0x54
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b6c:	2317      	movs	r3, #23
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b006      	add	sp, #24
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)

08001b7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7ff fba1 	bl	80012d4 <LL_ADC_IsEnabled>
 8001b92:	1e03      	subs	r3, r0, #0
 8001b94:	d000      	beq.n	8001b98 <ADC_Enable+0x1c>
 8001b96:	e069      	b.n	8001c6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4a36      	ldr	r2, [pc, #216]	@ (8001c78 <ADC_Enable+0xfc>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d00d      	beq.n	8001bc0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	2210      	movs	r2, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e056      	b.n	8001c6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fb61 	bl	800128c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001bca:	4b2c      	ldr	r3, [pc, #176]	@ (8001c7c <ADC_Enable+0x100>)
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff fa83 	bl	80010d8 <LL_ADC_GetCommonPathInternalCh>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d00f      	beq.n	8001bfc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bdc:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <ADC_Enable+0x104>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4928      	ldr	r1, [pc, #160]	@ (8001c84 <ADC_Enable+0x108>)
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7fe faa2 	bl	800012c <__udivsi3>
 8001be8:	0003      	movs	r3, r0
 8001bea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001bec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bee:	e002      	b.n	8001bf6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e5b      	ldrb	r3, [r3, #25]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d033      	beq.n	8001c6c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001c04:	f7ff fa4a 	bl	800109c <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c0c:	e027      	b.n	8001c5e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7ff fb5e 	bl	80012d4 <LL_ADC_IsEnabled>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d104      	bne.n	8001c26 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fb33 	bl	800128c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c26:	f7ff fa39 	bl	800109c <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d914      	bls.n	8001c5e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d00d      	beq.n	8001c5e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	2210      	movs	r2, #16
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2201      	movs	r2, #1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e007      	b.n	8001c6e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d1d0      	bne.n	8001c0e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	80000017 	.word	0x80000017
 8001c7c:	40012708 	.word	0x40012708
 8001c80:	20000000 	.word	0x20000000
 8001c84:	00030d40 	.word	0x00030d40

08001c88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	2250      	movs	r2, #80	@ 0x50
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d141      	bne.n	8001d24 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	2280      	movs	r2, #128	@ 0x80
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7ff fa51 	bl	800115a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d02e      	beq.n	8001d1a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	7e9b      	ldrb	r3, [r3, #26]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d12a      	bne.n	8001d1a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d123      	bne.n	8001d1a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff fb20 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d110      	bne.n	8001d02 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	210c      	movs	r1, #12
 8001cec:	438a      	bics	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	4a15      	ldr	r2, [pc, #84]	@ (8001d4c <ADC_DMAConvCplt+0xc4>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d00:	e00b      	b.n	8001d1a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d06:	2220      	movs	r2, #32
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d12:	2201      	movs	r2, #1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7fe febb 	bl	8000a98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d22:	e00f      	b.n	8001d44 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	2210      	movs	r2, #16
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fd43 	bl	80017bc <HAL_ADC_ErrorCallback>
}
 8001d36:	e005      	b.n	8001d44 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	0010      	movs	r0, r2
 8001d42:	4798      	blx	r3
}
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b004      	add	sp, #16
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	fffffefe 	.word	0xfffffefe

08001d50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fd23 	bl	80017ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	2240      	movs	r2, #64	@ 0x40
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff fd10 	bl	80017bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b004      	add	sp, #16
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	0002      	movs	r2, r0
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001db6:	d809      	bhi.n	8001dcc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <__NVIC_EnableIRQ+0x30>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4091      	lsls	r1, r2
 8001dc8:	000a      	movs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001dcc:	46c0      	nop			@ (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	0002      	movs	r2, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dec:	d828      	bhi.n	8001e40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dee:	4a2f      	ldr	r2, [pc, #188]	@ (8001eac <__NVIC_SetPriority+0xd4>)
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	33c0      	adds	r3, #192	@ 0xc0
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	589b      	ldr	r3, [r3, r2]
 8001dfe:	1dfa      	adds	r2, r7, #7
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	0011      	movs	r1, r2
 8001e04:	2203      	movs	r2, #3
 8001e06:	400a      	ands	r2, r1
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	21ff      	movs	r1, #255	@ 0xff
 8001e0c:	4091      	lsls	r1, r2
 8001e0e:	000a      	movs	r2, r1
 8001e10:	43d2      	mvns	r2, r2
 8001e12:	401a      	ands	r2, r3
 8001e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	22ff      	movs	r2, #255	@ 0xff
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	2303      	movs	r3, #3
 8001e26:	4003      	ands	r3, r0
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2c:	481f      	ldr	r0, [pc, #124]	@ (8001eac <__NVIC_SetPriority+0xd4>)
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	430a      	orrs	r2, r1
 8001e38:	33c0      	adds	r3, #192	@ 0xc0
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3e:	e031      	b.n	8001ea4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e40:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <__NVIC_SetPriority+0xd8>)
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	0019      	movs	r1, r3
 8001e48:	230f      	movs	r3, #15
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3306      	adds	r3, #6
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	18d3      	adds	r3, r2, r3
 8001e56:	3304      	adds	r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1dfa      	adds	r2, r7, #7
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	0011      	movs	r1, r2
 8001e60:	2203      	movs	r2, #3
 8001e62:	400a      	ands	r2, r1
 8001e64:	00d2      	lsls	r2, r2, #3
 8001e66:	21ff      	movs	r1, #255	@ 0xff
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	43d2      	mvns	r2, r2
 8001e6e:	401a      	ands	r2, r3
 8001e70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	22ff      	movs	r2, #255	@ 0xff
 8001e78:	401a      	ands	r2, r3
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	2303      	movs	r3, #3
 8001e82:	4003      	ands	r3, r0
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e88:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <__NVIC_SetPriority+0xd8>)
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	001c      	movs	r4, r3
 8001e90:	230f      	movs	r3, #15
 8001e92:	4023      	ands	r3, r4
 8001e94:	3b08      	subs	r3, #8
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	3306      	adds	r3, #6
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	18c3      	adds	r3, r0, r3
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b003      	add	sp, #12
 8001eaa:	bd90      	pop	{r4, r7, pc}
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	045b      	lsls	r3, r3, #17
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d301      	bcc.n	8001ecc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e010      	b.n	8001eee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <SysTick_Config+0x44>)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	2103      	movs	r1, #3
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff ff7c 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <SysTick_Config+0x44>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <SysTick_Config+0x44>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	210f      	movs	r1, #15
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	1c02      	adds	r2, r0, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ffaf 	bl	8001eb4 <SysTick_Config>
 8001f56:	0003      	movs	r3, r0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e077      	b.n	8002062 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	@ (800206c <HAL_DMA_Init+0x10c>)
 8001f78:	4694      	mov	ip, r2
 8001f7a:	4463      	add	r3, ip
 8001f7c:	2114      	movs	r1, #20
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7fe f8d4 	bl	800012c <__udivsi3>
 8001f84:	0003      	movs	r3, r0
 8001f86:	009a      	lsls	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2225      	movs	r2, #37	@ 0x25
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4934      	ldr	r1, [pc, #208]	@ (8002070 <HAL_DMA_Init+0x110>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f9c1 	bl	8002364 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	01db      	lsls	r3, r3, #7
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d102      	bne.n	8001ff4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	213f      	movs	r1, #63	@ 0x3f
 8001ffe:	400a      	ands	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800200a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d011      	beq.n	8002038 <HAL_DMA_Init+0xd8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d80d      	bhi.n	8002038 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f9cc 	bl	80023bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e008      	b.n	800204a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2225      	movs	r2, #37	@ 0x25
 8002054:	2101      	movs	r1, #1
 8002056:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	@ 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	bffdfff8 	.word	0xbffdfff8
 8002070:	ffff800f 	.word	0xffff800f

08002074 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2317      	movs	r3, #23
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2224      	movs	r2, #36	@ 0x24
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_DMA_Start_IT+0x24>
 8002094:	2302      	movs	r3, #2
 8002096:	e06f      	b.n	8002178 <HAL_DMA_Start_IT+0x104>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2224      	movs	r2, #36	@ 0x24
 800209c:	2101      	movs	r1, #1
 800209e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2225      	movs	r2, #37	@ 0x25
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d157      	bne.n	800215c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2225      	movs	r2, #37	@ 0x25
 80020b0:	2102      	movs	r1, #2
 80020b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	438a      	bics	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f907 	bl	80022e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	210e      	movs	r1, #14
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00f      	b.n	8002110 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2104      	movs	r1, #4
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	210a      	movs	r1, #10
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	4013      	ands	r3, r2
 800211c:	d008      	beq.n	8002130 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	0049      	lsls	r1, r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	0049      	lsls	r1, r1, #1
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00a      	b.n	8002172 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2280      	movs	r2, #128	@ 0x80
 8002160:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2224      	movs	r2, #36	@ 0x24
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800216a:	2317      	movs	r3, #23
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002172:	2317      	movs	r3, #23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b006      	add	sp, #24
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002188:	4b55      	ldr	r3, [pc, #340]	@ (80022e0 <HAL_DMA_IRQHandler+0x160>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	221c      	movs	r2, #28
 800219c:	4013      	ands	r3, r2
 800219e:	2204      	movs	r2, #4
 80021a0:	409a      	lsls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	d027      	beq.n	80021fa <HAL_DMA_IRQHandler+0x7a>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2204      	movs	r2, #4
 80021ae:	4013      	ands	r3, r2
 80021b0:	d023      	beq.n	80021fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2220      	movs	r2, #32
 80021ba:	4013      	ands	r3, r2
 80021bc:	d107      	bne.n	80021ce <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2104      	movs	r1, #4
 80021ca:	438a      	bics	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80021ce:	4b44      	ldr	r3, [pc, #272]	@ (80022e0 <HAL_DMA_IRQHandler+0x160>)
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	221c      	movs	r2, #28
 80021d8:	4013      	ands	r3, r2
 80021da:	2204      	movs	r2, #4
 80021dc:	409a      	lsls	r2, r3
 80021de:	4b40      	ldr	r3, [pc, #256]	@ (80022e0 <HAL_DMA_IRQHandler+0x160>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d100      	bne.n	80021ee <HAL_DMA_IRQHandler+0x6e>
 80021ec:	e073      	b.n	80022d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	0010      	movs	r0, r2
 80021f6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80021f8:	e06d      	b.n	80022d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	221c      	movs	r2, #28
 8002200:	4013      	ands	r3, r2
 8002202:	2202      	movs	r2, #2
 8002204:	409a      	lsls	r2, r3
 8002206:	0013      	movs	r3, r2
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	d02e      	beq.n	800226c <HAL_DMA_IRQHandler+0xec>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2202      	movs	r2, #2
 8002212:	4013      	ands	r3, r2
 8002214:	d02a      	beq.n	800226c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2220      	movs	r2, #32
 800221e:	4013      	ands	r3, r2
 8002220:	d10b      	bne.n	800223a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	210a      	movs	r1, #10
 800222e:	438a      	bics	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2225      	movs	r2, #37	@ 0x25
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800223a:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <HAL_DMA_IRQHandler+0x160>)
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	221c      	movs	r2, #28
 8002244:	4013      	ands	r3, r2
 8002246:	2202      	movs	r2, #2
 8002248:	409a      	lsls	r2, r3
 800224a:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <HAL_DMA_IRQHandler+0x160>)
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2224      	movs	r2, #36	@ 0x24
 8002254:	2100      	movs	r1, #0
 8002256:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d03a      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	0010      	movs	r0, r2
 8002268:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800226a:	e034      	b.n	80022d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	221c      	movs	r2, #28
 8002272:	4013      	ands	r3, r2
 8002274:	2208      	movs	r2, #8
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	d02b      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x158>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2208      	movs	r2, #8
 8002284:	4013      	ands	r3, r2
 8002286:	d027      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	210e      	movs	r1, #14
 8002294:	438a      	bics	r2, r1
 8002296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_DMA_IRQHandler+0x160>)
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	221c      	movs	r2, #28
 80022a2:	4013      	ands	r3, r2
 80022a4:	2201      	movs	r2, #1
 80022a6:	409a      	lsls	r2, r3
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_DMA_IRQHandler+0x160>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2225      	movs	r2, #37	@ 0x25
 80022b8:	2101      	movs	r1, #1
 80022ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	@ 0x24
 80022c0:	2100      	movs	r1, #0
 80022c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	0010      	movs	r0, r2
 80022d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	46c0      	nop			@ (mov r8, r8)
}
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40020000 	.word	0x40020000

080022e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800230c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800230e:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <DMA_SetConfig+0x7c>)
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	221c      	movs	r2, #28
 8002318:	4013      	ands	r3, r2
 800231a:	2201      	movs	r2, #1
 800231c:	409a      	lsls	r2, r3
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <DMA_SetConfig+0x7c>)
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d108      	bne.n	8002346 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002344:	e007      	b.n	8002356 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	60da      	str	r2, [r3, #12]
}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b004      	add	sp, #16
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	40020000 	.word	0x40020000

08002364 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002374:	4694      	mov	ip, r2
 8002376:	4463      	add	r3, ip
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	001a      	movs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	001a      	movs	r2, r3
 8002386:	23ff      	movs	r3, #255	@ 0xff
 8002388:	4013      	ands	r3, r2
 800238a:	3b08      	subs	r3, #8
 800238c:	2114      	movs	r1, #20
 800238e:	0018      	movs	r0, r3
 8002390:	f7fd fecc 	bl	800012c <__udivsi3>
 8002394:	0003      	movs	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a07      	ldr	r2, [pc, #28]	@ (80023b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800239c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	221f      	movs	r2, #31
 80023a2:	4013      	ands	r3, r2
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	10008200 	.word	0x10008200
 80023b8:	40020880 	.word	0x40020880

080023bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	223f      	movs	r2, #63	@ 0x3f
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80023d2:	4694      	mov	ip, r2
 80023d4:	4463      	add	r3, ip
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	001a      	movs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	4013      	ands	r3, r2
 80023ec:	2201      	movs	r2, #1
 80023ee:	409a      	lsls	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b004      	add	sp, #16
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	1000823f 	.word	0x1000823f
 8002400:	40020940 	.word	0x40020940

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002412:	e147      	b.n	80026a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4091      	lsls	r1, r2
 800241e:	000a      	movs	r2, r1
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d100      	bne.n	800242c <HAL_GPIO_Init+0x28>
 800242a:	e138      	b.n	800269e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2203      	movs	r2, #3
 8002432:	4013      	ands	r3, r2
 8002434:	2b01      	cmp	r3, #1
 8002436:	d005      	beq.n	8002444 <HAL_GPIO_Init+0x40>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	4013      	ands	r3, r2
 8002440:	2b02      	cmp	r3, #2
 8002442:	d130      	bne.n	80024a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	409a      	lsls	r2, r3
 8002452:	0013      	movs	r3, r2
 8002454:	43da      	mvns	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800247a:	2201      	movs	r2, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	43da      	mvns	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	2201      	movs	r2, #1
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
 8002498:	0013      	movs	r3, r2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d017      	beq.n	80024e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	409a      	lsls	r2, r3
 80024c0:	0013      	movs	r3, r2
 80024c2:	43da      	mvns	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	409a      	lsls	r2, r3
 80024d4:	0013      	movs	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2203      	movs	r2, #3
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d123      	bne.n	8002536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	58d3      	ldr	r3, [r2, r3]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2207      	movs	r2, #7
 8002500:	4013      	ands	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	43da      	mvns	r2, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2107      	movs	r1, #7
 800251a:	400b      	ands	r3, r1
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	409a      	lsls	r2, r3
 8002520:	0013      	movs	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	6939      	ldr	r1, [r7, #16]
 8002534:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	43da      	mvns	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	401a      	ands	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	23c0      	movs	r3, #192	@ 0xc0
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	4013      	ands	r3, r2
 8002574:	d100      	bne.n	8002578 <HAL_GPIO_Init+0x174>
 8002576:	e092      	b.n	800269e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002578:	4a50      	ldr	r2, [pc, #320]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3318      	adds	r3, #24
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	589b      	ldr	r3, [r3, r2]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2203      	movs	r2, #3
 800258a:	4013      	ands	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	220f      	movs	r2, #15
 8002590:	409a      	lsls	r2, r3
 8002592:	0013      	movs	r3, r2
 8002594:	43da      	mvns	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	23a0      	movs	r3, #160	@ 0xa0
 80025a0:	05db      	lsls	r3, r3, #23
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x1ca>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a45      	ldr	r2, [pc, #276]	@ (80026c0 <HAL_GPIO_Init+0x2bc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x1c6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a44      	ldr	r2, [pc, #272]	@ (80026c4 <HAL_GPIO_Init+0x2c0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x1c2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a43      	ldr	r2, [pc, #268]	@ (80026c8 <HAL_GPIO_Init+0x2c4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x1be>
 80025be:	2303      	movs	r3, #3
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x1cc>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e004      	b.n	80025d0 <HAL_GPIO_Init+0x1cc>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e002      	b.n	80025d0 <HAL_GPIO_Init+0x1cc>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x1cc>
 80025ce:	2300      	movs	r3, #0
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	2103      	movs	r1, #3
 80025d4:	400a      	ands	r2, r1
 80025d6:	00d2      	lsls	r2, r2, #3
 80025d8:	4093      	lsls	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025e0:	4936      	ldr	r1, [pc, #216]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3318      	adds	r3, #24
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ee:	4b33      	ldr	r3, [pc, #204]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43da      	mvns	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	035b      	lsls	r3, r3, #13
 8002606:	4013      	ands	r3, r2
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002618:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	43da      	mvns	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	039b      	lsls	r3, r3, #14
 8002630:	4013      	ands	r3, r2
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800263c:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002642:	4a1e      	ldr	r2, [pc, #120]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 8002644:	2384      	movs	r3, #132	@ 0x84
 8002646:	58d3      	ldr	r3, [r2, r3]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43da      	mvns	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	4013      	ands	r3, r2
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002668:	4914      	ldr	r1, [pc, #80]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 800266a:	2284      	movs	r2, #132	@ 0x84
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002670:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	58d3      	ldr	r3, [r2, r3]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43da      	mvns	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	025b      	lsls	r3, r3, #9
 800268a:	4013      	ands	r3, r2
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002696:	4909      	ldr	r1, [pc, #36]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3301      	adds	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	40da      	lsrs	r2, r3
 80026ac:	1e13      	subs	r3, r2, #0
 80026ae:	d000      	beq.n	80026b2 <HAL_GPIO_Init+0x2ae>
 80026b0:	e6b0      	b.n	8002414 <HAL_GPIO_Init+0x10>
  }
}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	46c0      	nop			@ (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b006      	add	sp, #24
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021800 	.word	0x40021800
 80026c0:	50000400 	.word	0x50000400
 80026c4:	50000800 	.word	0x50000800
 80026c8:	50000c00 	.word	0x50000c00

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	0008      	movs	r0, r1
 80026d6:	0011      	movs	r1, r2
 80026d8:	1cbb      	adds	r3, r7, #2
 80026da:	1c02      	adds	r2, r0, #0
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	1c7b      	adds	r3, r7, #1
 80026e0:	1c0a      	adds	r2, r1, #0
 80026e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e4:	1c7b      	adds	r3, r7, #1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ec:	1cbb      	adds	r3, r7, #2
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026f4:	e003      	b.n	80026fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f6:	1cbb      	adds	r3, r7, #2
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	0002      	movs	r2, r0
 8002710:	1dbb      	adds	r3, r7, #6
 8002712:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002714:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	1dba      	adds	r2, r7, #6
 800271a:	8812      	ldrh	r2, [r2, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	d008      	beq.n	8002732 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002720:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002722:	1dba      	adds	r2, r7, #6
 8002724:	8812      	ldrh	r2, [r2, #0]
 8002726:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002728:	1dbb      	adds	r3, r7, #6
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 f815 	bl	800275c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	1dba      	adds	r2, r7, #6
 8002738:	8812      	ldrh	r2, [r2, #0]
 800273a:	4013      	ands	r3, r2
 800273c:	d008      	beq.n	8002750 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002740:	1dba      	adds	r2, r7, #6
 8002742:	8812      	ldrh	r2, [r2, #0]
 8002744:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002746:	1dbb      	adds	r3, r7, #6
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	0018      	movs	r0, r3
 800274c:	f7fe f9b8 	bl	8000ac0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021800 	.word	0x40021800

0800275c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	0002      	movs	r2, r0
 8002764:	1dbb      	adds	r3, r7, #6
 8002766:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002778:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	@ (80027e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d11f      	bne.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002794:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	0013      	movs	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	189b      	adds	r3, r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4912      	ldr	r1, [pc, #72]	@ (80027ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fd fcc2 	bl	800012c <__udivsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ae:	e008      	b.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e001      	b.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e009      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	401a      	ands	r2, r3
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d0ed      	beq.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b004      	add	sp, #16
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	40007000 	.word	0x40007000
 80027e4:	fffff9ff 	.word	0xfffff9ff
 80027e8:	20000000 	.word	0x20000000
 80027ec:	000f4240 	.word	0x000f4240

080027f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80027f4:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <LL_RCC_GetAPB1Prescaler+0x14>)
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	23e0      	movs	r3, #224	@ 0xe0
 80027fa:	01db      	lsls	r3, r3, #7
 80027fc:	4013      	ands	r3, r2
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e2fe      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	4013      	ands	r3, r2
 8002822:	d100      	bne.n	8002826 <HAL_RCC_OscConfig+0x1e>
 8002824:	e07c      	b.n	8002920 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002826:	4bc3      	ldr	r3, [pc, #780]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2238      	movs	r2, #56	@ 0x38
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002830:	4bc0      	ldr	r3, [pc, #768]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2203      	movs	r2, #3
 8002836:	4013      	ands	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b10      	cmp	r3, #16
 800283e:	d102      	bne.n	8002846 <HAL_RCC_OscConfig+0x3e>
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d002      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	4013      	ands	r3, r2
 8002856:	d062      	beq.n	800291e <HAL_RCC_OscConfig+0x116>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d15e      	bne.n	800291e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e2d9      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	429a      	cmp	r2, r3
 800286e:	d107      	bne.n	8002880 <HAL_RCC_OscConfig+0x78>
 8002870:	4bb0      	ldr	r3, [pc, #704]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4baf      	ldr	r3, [pc, #700]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002876:	2180      	movs	r1, #128	@ 0x80
 8002878:	0249      	lsls	r1, r1, #9
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e020      	b.n	80028c2 <HAL_RCC_OscConfig+0xba>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	23a0      	movs	r3, #160	@ 0xa0
 8002886:	02db      	lsls	r3, r3, #11
 8002888:	429a      	cmp	r2, r3
 800288a:	d10e      	bne.n	80028aa <HAL_RCC_OscConfig+0xa2>
 800288c:	4ba9      	ldr	r3, [pc, #676]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4ba8      	ldr	r3, [pc, #672]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	02c9      	lsls	r1, r1, #11
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	4ba6      	ldr	r3, [pc, #664]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4ba5      	ldr	r3, [pc, #660]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	2180      	movs	r1, #128	@ 0x80
 80028a2:	0249      	lsls	r1, r1, #9
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e00b      	b.n	80028c2 <HAL_RCC_OscConfig+0xba>
 80028aa:	4ba2      	ldr	r3, [pc, #648]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80028b0:	49a1      	ldr	r1, [pc, #644]	@ (8002b38 <HAL_RCC_OscConfig+0x330>)
 80028b2:	400a      	ands	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	4b9f      	ldr	r3, [pc, #636]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	499f      	ldr	r1, [pc, #636]	@ (8002b3c <HAL_RCC_OscConfig+0x334>)
 80028be:	400a      	ands	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d014      	beq.n	80028f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fbe7 	bl	800109c <HAL_GetTick>
 80028ce:	0003      	movs	r3, r0
 80028d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fbe2 	bl	800109c <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e298      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e6:	4b93      	ldr	r3, [pc, #588]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	@ 0x80
 80028ec:	029b      	lsls	r3, r3, #10
 80028ee:	4013      	ands	r3, r2
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xcc>
 80028f2:	e015      	b.n	8002920 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fbd2 	bl	800109c <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fe:	f7fe fbcd 	bl	800109c <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	@ 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e283      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002910:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	029b      	lsls	r3, r3, #10
 8002918:	4013      	ands	r3, r2
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0xf6>
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d100      	bne.n	800292c <HAL_RCC_OscConfig+0x124>
 800292a:	e099      	b.n	8002a60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292c:	4b81      	ldr	r3, [pc, #516]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2238      	movs	r2, #56	@ 0x38
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002936:	4b7f      	ldr	r3, [pc, #508]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2203      	movs	r2, #3
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b10      	cmp	r3, #16
 8002944:	d102      	bne.n	800294c <HAL_RCC_OscConfig+0x144>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d002      	beq.n	8002952 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d135      	bne.n	80029be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002952:	4b78      	ldr	r3, [pc, #480]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4013      	ands	r3, r2
 800295c:	d005      	beq.n	800296a <HAL_RCC_OscConfig+0x162>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e256      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296a:	4b72      	ldr	r3, [pc, #456]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a74      	ldr	r2, [pc, #464]	@ (8002b40 <HAL_RCC_OscConfig+0x338>)
 8002970:	4013      	ands	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d112      	bne.n	80029ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002986:	4b6b      	ldr	r3, [pc, #428]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b44 <HAL_RCC_OscConfig+0x33c>)
 800298c:	4013      	ands	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	4b67      	ldr	r3, [pc, #412]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800299a:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0adb      	lsrs	r3, r3, #11
 80029a0:	2207      	movs	r2, #7
 80029a2:	4013      	ands	r3, r2
 80029a4:	4a68      	ldr	r2, [pc, #416]	@ (8002b48 <HAL_RCC_OscConfig+0x340>)
 80029a6:	40da      	lsrs	r2, r3
 80029a8:	4b68      	ldr	r3, [pc, #416]	@ (8002b4c <HAL_RCC_OscConfig+0x344>)
 80029aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029ac:	4b68      	ldr	r3, [pc, #416]	@ (8002b50 <HAL_RCC_OscConfig+0x348>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7fe fb17 	bl	8000fe4 <HAL_InitTick>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d051      	beq.n	8002a5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e22c      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d030      	beq.n	8002a28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x33c>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	4b57      	ldr	r3, [pc, #348]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80029da:	4b56      	ldr	r3, [pc, #344]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b55      	ldr	r3, [pc, #340]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 80029e0:	2180      	movs	r1, #128	@ 0x80
 80029e2:	0049      	lsls	r1, r1, #1
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fb58 	bl	800109c <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fb53 	bl	800109c <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e209      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a04:	4b4b      	ldr	r3, [pc, #300]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	@ 0x80
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b48      	ldr	r3, [pc, #288]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a4a      	ldr	r2, [pc, #296]	@ (8002b40 <HAL_RCC_OscConfig+0x338>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	021a      	lsls	r2, r3, #8
 8002a20:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	e01b      	b.n	8002a60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a28:	4b42      	ldr	r3, [pc, #264]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	4949      	ldr	r1, [pc, #292]	@ (8002b54 <HAL_RCC_OscConfig+0x34c>)
 8002a30:	400a      	ands	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fb32 	bl	800109c <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fb2d 	bl	800109c <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1e3      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a50:	4b38      	ldr	r3, [pc, #224]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x236>
 8002a5c:	e000      	b.n	8002a60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2208      	movs	r2, #8
 8002a66:	4013      	ands	r3, r2
 8002a68:	d047      	beq.n	8002afa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a6a:	4b32      	ldr	r3, [pc, #200]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2238      	movs	r2, #56	@ 0x38
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b18      	cmp	r3, #24
 8002a74:	d10a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a76:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d03c      	beq.n	8002afa <HAL_RCC_OscConfig+0x2f2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d138      	bne.n	8002afa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e1c5      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d019      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a94:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a98:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fafc 	bl	800109c <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7fe faf7 	bl	800109c <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1ad      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002abc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d0f1      	beq.n	8002aaa <HAL_RCC_OscConfig+0x2a2>
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002aca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002acc:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fae2 	bl	800109c <HAL_GetTick>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe fadd 	bl	800109c <HAL_GetTick>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e193      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af4:	2202      	movs	r2, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	d1f1      	bne.n	8002ade <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2204      	movs	r2, #4
 8002b00:	4013      	ands	r3, r2
 8002b02:	d100      	bne.n	8002b06 <HAL_RCC_OscConfig+0x2fe>
 8002b04:	e0c6      	b.n	8002c94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	231f      	movs	r3, #31
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b0e:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2238      	movs	r2, #56	@ 0x38
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d11e      	bne.n	8002b58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	d100      	bne.n	8002b26 <HAL_RCC_OscConfig+0x31e>
 8002b24:	e0b6      	b.n	8002c94 <HAL_RCC_OscConfig+0x48c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d000      	beq.n	8002b30 <HAL_RCC_OscConfig+0x328>
 8002b2e:	e0b1      	b.n	8002c94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e171      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
 8002b34:	40021000 	.word	0x40021000
 8002b38:	fffeffff 	.word	0xfffeffff
 8002b3c:	fffbffff 	.word	0xfffbffff
 8002b40:	ffff80ff 	.word	0xffff80ff
 8002b44:	ffffc7ff 	.word	0xffffc7ff
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004
 8002b54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b58:	4bb1      	ldr	r3, [pc, #708]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b5c:	2380      	movs	r3, #128	@ 0x80
 8002b5e:	055b      	lsls	r3, r3, #21
 8002b60:	4013      	ands	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_OscConfig+0x360>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x362>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d011      	beq.n	8002b92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4bac      	ldr	r3, [pc, #688]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b72:	4bab      	ldr	r3, [pc, #684]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002b74:	2180      	movs	r1, #128	@ 0x80
 8002b76:	0549      	lsls	r1, r1, #21
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b7c:	4ba8      	ldr	r3, [pc, #672]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	055b      	lsls	r3, r3, #21
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b8a:	231f      	movs	r3, #31
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b92:	4ba4      	ldr	r3, [pc, #656]	@ (8002e24 <HAL_RCC_OscConfig+0x61c>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d11a      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b9e:	4ba1      	ldr	r3, [pc, #644]	@ (8002e24 <HAL_RCC_OscConfig+0x61c>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4ba0      	ldr	r3, [pc, #640]	@ (8002e24 <HAL_RCC_OscConfig+0x61c>)
 8002ba4:	2180      	movs	r1, #128	@ 0x80
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fa76 	bl	800109c <HAL_GetTick>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe fa71 	bl	800109c <HAL_GetTick>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e127      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc8:	4b96      	ldr	r3, [pc, #600]	@ (8002e24 <HAL_RCC_OscConfig+0x61c>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x3e2>
 8002bdc:	4b90      	ldr	r3, [pc, #576]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002be0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	430a      	orrs	r2, r1
 8002be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002be8:	e01c      	b.n	8002c24 <HAL_RCC_OscConfig+0x41c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x404>
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002bf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bfe:	4b88      	ldr	r3, [pc, #544]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c02:	4b87      	ldr	r3, [pc, #540]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0x41c>
 8002c0c:	4b84      	ldr	r3, [pc, #528]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c10:	4b83      	ldr	r3, [pc, #524]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	438a      	bics	r2, r1
 8002c16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c18:	4b81      	ldr	r3, [pc, #516]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c1c:	4b80      	ldr	r3, [pc, #512]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c1e:	2104      	movs	r1, #4
 8002c20:	438a      	bics	r2, r1
 8002c22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d014      	beq.n	8002c56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fa36 	bl	800109c <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c34:	e009      	b.n	8002c4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fa31 	bl	800109c <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	4a79      	ldr	r2, [pc, #484]	@ (8002e28 <HAL_RCC_OscConfig+0x620>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0e6      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4a:	4b75      	ldr	r3, [pc, #468]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x42e>
 8002c54:	e013      	b.n	8002c7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fa21 	bl	800109c <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe fa1c 	bl	800109c <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e28 <HAL_RCC_OscConfig+0x620>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0d1      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c74:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c7e:	231f      	movs	r3, #31
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b65      	ldr	r3, [pc, #404]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c8c:	4b64      	ldr	r3, [pc, #400]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002c8e:	4967      	ldr	r1, [pc, #412]	@ (8002e2c <HAL_RCC_OscConfig+0x624>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x496>
 8002c9c:	e0bb      	b.n	8002e16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9e:	4b60      	ldr	r3, [pc, #384]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2238      	movs	r2, #56	@ 0x38
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d100      	bne.n	8002cac <HAL_RCC_OscConfig+0x4a4>
 8002caa:	e07b      	b.n	8002da4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d156      	bne.n	8002d62 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b59      	ldr	r3, [pc, #356]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002cba:	495d      	ldr	r1, [pc, #372]	@ (8002e30 <HAL_RCC_OscConfig+0x628>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f9ec 	bl	800109c <HAL_GetTick>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fe f9e7 	bl	800109c <HAL_GetTick>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e09d      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cdc:	4b50      	ldr	r3, [pc, #320]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	049b      	lsls	r3, r3, #18
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a51      	ldr	r2, [pc, #324]	@ (8002e34 <HAL_RCC_OscConfig+0x62c>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d14:	431a      	orrs	r2, r3
 8002d16:	4b42      	ldr	r3, [pc, #264]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b40      	ldr	r3, [pc, #256]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b3f      	ldr	r3, [pc, #252]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d22:	2180      	movs	r1, #128	@ 0x80
 8002d24:	0449      	lsls	r1, r1, #17
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d30:	2180      	movs	r1, #128	@ 0x80
 8002d32:	0549      	lsls	r1, r1, #21
 8002d34:	430a      	orrs	r2, r1
 8002d36:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe f9b0 	bl	800109c <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe f9ab 	bl	800109c <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e061      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d54:	4b32      	ldr	r3, [pc, #200]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	@ 0x80
 8002d5a:	049b      	lsls	r3, r3, #18
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x53a>
 8002d60:	e059      	b.n	8002e16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b2f      	ldr	r3, [pc, #188]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b2e      	ldr	r3, [pc, #184]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d68:	4931      	ldr	r1, [pc, #196]	@ (8002e30 <HAL_RCC_OscConfig+0x628>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe f995 	bl	800109c <HAL_GetTick>
 8002d72:	0003      	movs	r3, r0
 8002d74:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f990 	bl	800109c <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e046      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8a:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	@ 0x80
 8002d90:	049b      	lsls	r3, r3, #18
 8002d92:	4013      	ands	r3, r2
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002d96:	4b22      	ldr	r3, [pc, #136]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d9c:	4926      	ldr	r1, [pc, #152]	@ (8002e38 <HAL_RCC_OscConfig+0x630>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	e038      	b.n	8002e16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e033      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2203      	movs	r2, #3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d126      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2270      	movs	r2, #112	@ 0x70
 8002dc8:	401a      	ands	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d11f      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	23fe      	movs	r3, #254	@ 0xfe
 8002dd6:	01db      	lsls	r3, r3, #7
 8002dd8:	401a      	ands	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d116      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	23f8      	movs	r3, #248	@ 0xf8
 8002de8:	039b      	lsls	r3, r3, #14
 8002dea:	401a      	ands	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d10e      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	23e0      	movs	r3, #224	@ 0xe0
 8002df8:	051b      	lsls	r3, r3, #20
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	0f5b      	lsrs	r3, r3, #29
 8002e08:	075a      	lsls	r2, r3, #29
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b008      	add	sp, #32
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40007000 	.word	0x40007000
 8002e28:	00001388 	.word	0x00001388
 8002e2c:	efffffff 	.word	0xefffffff
 8002e30:	feffffff 	.word	0xfeffffff
 8002e34:	11c1808c 	.word	0x11c1808c
 8002e38:	eefefffc 	.word	0xeefefffc

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0e9      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2207      	movs	r2, #7
 8002e56:	4013      	ands	r3, r2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d91e      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2207      	movs	r2, #7
 8002e64:	4393      	bics	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	4b70      	ldr	r3, [pc, #448]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e70:	f7fe f914 	bl	800109c <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e78:	e009      	b.n	8002e8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7a:	f7fe f90f 	bl	800109c <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	4a6a      	ldr	r2, [pc, #424]	@ (8003030 <HAL_RCC_ClockConfig+0x1f4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0ca      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e8e:	4b67      	ldr	r3, [pc, #412]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2207      	movs	r2, #7
 8002e94:	4013      	ands	r3, r2
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4013      	ands	r3, r2
 8002eae:	d006      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eb0:	4b60      	ldr	r3, [pc, #384]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b5f      	ldr	r3, [pc, #380]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb6:	21e0      	movs	r1, #224	@ 0xe0
 8002eb8:	01c9      	lsls	r1, r1, #7
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4a5d      	ldr	r2, [pc, #372]	@ (8003038 <HAL_RCC_ClockConfig+0x1fc>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d057      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee4:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	029b      	lsls	r3, r3, #10
 8002eec:	4013      	ands	r3, r2
 8002eee:	d12b      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e097      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efc:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	049b      	lsls	r3, r3, #18
 8002f04:	4013      	ands	r3, r2
 8002f06:	d11f      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e08b      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d113      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e07f      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2c:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f30:	2202      	movs	r2, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d108      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e074      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	2202      	movs	r2, #2
 8002f40:	4013      	ands	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e06d      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f48:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	4393      	bics	r3, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4b37      	ldr	r3, [pc, #220]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f89e 	bl	800109c <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f64:	e009      	b.n	8002f7a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f66:	f7fe f899 	bl	800109c <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	4a2f      	ldr	r2, [pc, #188]	@ (8003030 <HAL_RCC_ClockConfig+0x1f4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e054      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2238      	movs	r2, #56	@ 0x38
 8002f80:	401a      	ands	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1ec      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2207      	movs	r2, #7
 8002f92:	4013      	ands	r3, r2
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d21e      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b24      	ldr	r3, [pc, #144]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	4b21      	ldr	r3, [pc, #132]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fac:	f7fe f876 	bl	800109c <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fb4:	e009      	b.n	8002fca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb6:	f7fe f871 	bl	800109c <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_RCC_ClockConfig+0x1f4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e02c      	b.n	8003024 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fca:	4b18      	ldr	r3, [pc, #96]	@ (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2207      	movs	r2, #7
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe2:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4a15      	ldr	r2, [pc, #84]	@ (800303c <HAL_RCC_ClockConfig+0x200>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ff6:	f000 f829 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8002ffa:	0001      	movs	r1, r0
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	220f      	movs	r2, #15
 8003004:	401a      	ands	r2, r3
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <HAL_RCC_ClockConfig+0x204>)
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	58d3      	ldr	r3, [r2, r3]
 800300c:	221f      	movs	r2, #31
 800300e:	4013      	ands	r3, r2
 8003010:	000a      	movs	r2, r1
 8003012:	40da      	lsrs	r2, r3
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_ClockConfig+0x208>)
 8003016:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_ClockConfig+0x20c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0018      	movs	r0, r3
 800301e:	f7fd ffe1 	bl	8000fe4 <HAL_InitTick>
 8003022:	0003      	movs	r3, r0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40022000 	.word	0x40022000
 8003030:	00001388 	.word	0x00001388
 8003034:	40021000 	.word	0x40021000
 8003038:	fffff0ff 	.word	0xfffff0ff
 800303c:	ffff8fff 	.word	0xffff8fff
 8003040:	0800587c 	.word	0x0800587c
 8003044:	20000000 	.word	0x20000000
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003052:	4b3c      	ldr	r3, [pc, #240]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2238      	movs	r2, #56	@ 0x38
 8003058:	4013      	ands	r3, r2
 800305a:	d10f      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800305c:	4b39      	ldr	r3, [pc, #228]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0adb      	lsrs	r3, r3, #11
 8003062:	2207      	movs	r2, #7
 8003064:	4013      	ands	r3, r2
 8003066:	2201      	movs	r2, #1
 8003068:	409a      	lsls	r2, r3
 800306a:	0013      	movs	r3, r2
 800306c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	4835      	ldr	r0, [pc, #212]	@ (8003148 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003072:	f7fd f85b 	bl	800012c <__udivsi3>
 8003076:	0003      	movs	r3, r0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e05d      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800307c:	4b31      	ldr	r3, [pc, #196]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2238      	movs	r2, #56	@ 0x38
 8003082:	4013      	ands	r3, r2
 8003084:	2b08      	cmp	r3, #8
 8003086:	d102      	bne.n	800308e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003088:	4b30      	ldr	r3, [pc, #192]	@ (800314c <HAL_RCC_GetSysClockFreq+0x100>)
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e054      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308e:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2238      	movs	r2, #56	@ 0x38
 8003094:	4013      	ands	r3, r2
 8003096:	2b10      	cmp	r3, #16
 8003098:	d138      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800309a:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2203      	movs	r2, #3
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030a4:	4b27      	ldr	r3, [pc, #156]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	2207      	movs	r2, #7
 80030ac:	4013      	ands	r3, r2
 80030ae:	3301      	adds	r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4824      	ldr	r0, [pc, #144]	@ (800314c <HAL_RCC_GetSysClockFreq+0x100>)
 80030bc:	f7fd f836 	bl	800012c <__udivsi3>
 80030c0:	0003      	movs	r3, r0
 80030c2:	0019      	movs	r1, r3
 80030c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	227f      	movs	r2, #127	@ 0x7f
 80030cc:	4013      	ands	r3, r2
 80030ce:	434b      	muls	r3, r1
 80030d0:	617b      	str	r3, [r7, #20]
        break;
 80030d2:	e00d      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	481c      	ldr	r0, [pc, #112]	@ (8003148 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030d8:	f7fd f828 	bl	800012c <__udivsi3>
 80030dc:	0003      	movs	r3, r0
 80030de:	0019      	movs	r1, r3
 80030e0:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	227f      	movs	r2, #127	@ 0x7f
 80030e8:	4013      	ands	r3, r2
 80030ea:	434b      	muls	r3, r1
 80030ec:	617b      	str	r3, [r7, #20]
        break;
 80030ee:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030f0:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0f5b      	lsrs	r3, r3, #29
 80030f6:	2207      	movs	r2, #7
 80030f8:	4013      	ands	r3, r2
 80030fa:	3301      	adds	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7fd f813 	bl	800012c <__udivsi3>
 8003106:	0003      	movs	r3, r0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e015      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800310c:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2238      	movs	r2, #56	@ 0x38
 8003112:	4013      	ands	r3, r2
 8003114:	2b20      	cmp	r3, #32
 8003116:	d103      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003120:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2238      	movs	r2, #56	@ 0x38
 8003126:	4013      	ands	r3, r2
 8003128:	2b18      	cmp	r3, #24
 800312a:	d103      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800312c:	23fa      	movs	r3, #250	@ 0xfa
 800312e:	01db      	lsls	r3, r3, #7
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e001      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003138:	693b      	ldr	r3, [r7, #16]
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b006      	add	sp, #24
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	40021000 	.word	0x40021000
 8003148:	00f42400 	.word	0x00f42400
 800314c:	007a1200 	.word	0x007a1200

08003150 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b02      	ldr	r3, [pc, #8]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x10>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	20000000 	.word	0x20000000

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003164:	b5b0      	push	{r4, r5, r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003168:	f7ff fff2 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 800316c:	0004      	movs	r4, r0
 800316e:	f7ff fb3f 	bl	80027f0 <LL_RCC_GetAPB1Prescaler>
 8003172:	0003      	movs	r3, r0
 8003174:	0b1a      	lsrs	r2, r3, #12
 8003176:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	58d3      	ldr	r3, [r2, r3]
 800317c:	221f      	movs	r2, #31
 800317e:	4013      	ands	r3, r2
 8003180:	40dc      	lsrs	r4, r3
 8003182:	0023      	movs	r3, r4
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	bdb0      	pop	{r4, r5, r7, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	080058bc 	.word	0x080058bc

08003190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003198:	2313      	movs	r3, #19
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031a0:	2312      	movs	r3, #18
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2380      	movs	r3, #128	@ 0x80
 80031ae:	029b      	lsls	r3, r3, #10
 80031b0:	4013      	ands	r3, r2
 80031b2:	d100      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031b4:	e0a3      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2011      	movs	r0, #17
 80031b8:	183b      	adds	r3, r7, r0
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031be:	4bb3      	ldr	r3, [pc, #716]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80031c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	055b      	lsls	r3, r3, #21
 80031c6:	4013      	ands	r3, r2
 80031c8:	d110      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4bb0      	ldr	r3, [pc, #704]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80031cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ce:	4baf      	ldr	r3, [pc, #700]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	0549      	lsls	r1, r1, #21
 80031d4:	430a      	orrs	r2, r1
 80031d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031d8:	4bac      	ldr	r3, [pc, #688]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80031da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	055b      	lsls	r3, r3, #21
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e6:	183b      	adds	r3, r7, r0
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ec:	4ba8      	ldr	r3, [pc, #672]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4ba7      	ldr	r3, [pc, #668]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	0049      	lsls	r1, r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031fa:	f7fd ff4f 	bl	800109c <HAL_GetTick>
 80031fe:	0003      	movs	r3, r0
 8003200:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003202:	e00b      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fd ff4a 	bl	800109c <HAL_GetTick>
 8003208:	0002      	movs	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d904      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003212:	2313      	movs	r3, #19
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2203      	movs	r2, #3
 8003218:	701a      	strb	r2, [r3, #0]
        break;
 800321a:	e005      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800321c:	4b9c      	ldr	r3, [pc, #624]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4013      	ands	r3, r2
 8003226:	d0ed      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003228:	2313      	movs	r3, #19
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d154      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003232:	4b96      	ldr	r3, [pc, #600]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003234:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003236:	23c0      	movs	r3, #192	@ 0xc0
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4013      	ands	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d019      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	429a      	cmp	r2, r3
 800324c:	d014      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800324e:	4b8f      	ldr	r3, [pc, #572]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	4a90      	ldr	r2, [pc, #576]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003254:	4013      	ands	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003258:	4b8c      	ldr	r3, [pc, #560]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800325a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800325c:	4b8b      	ldr	r3, [pc, #556]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800325e:	2180      	movs	r1, #128	@ 0x80
 8003260:	0249      	lsls	r1, r1, #9
 8003262:	430a      	orrs	r2, r1
 8003264:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003266:	4b89      	ldr	r3, [pc, #548]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003268:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800326a:	4b88      	ldr	r3, [pc, #544]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800326c:	498a      	ldr	r1, [pc, #552]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800326e:	400a      	ands	r2, r1
 8003270:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003272:	4b86      	ldr	r3, [pc, #536]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2201      	movs	r2, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d016      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd ff0c 	bl	800109c <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003288:	e00c      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd ff07 	bl	800109c <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	4a81      	ldr	r2, [pc, #516]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d904      	bls.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800329a:	2313      	movs	r3, #19
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	2203      	movs	r2, #3
 80032a0:	701a      	strb	r2, [r3, #0]
            break;
 80032a2:	e004      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a4:	4b79      	ldr	r3, [pc, #484]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2202      	movs	r2, #2
 80032aa:	4013      	ands	r3, r2
 80032ac:	d0ed      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80032ae:	2313      	movs	r3, #19
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b8:	4b74      	ldr	r3, [pc, #464]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	4a75      	ldr	r2, [pc, #468]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032be:	4013      	ands	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c6:	4b71      	ldr	r3, [pc, #452]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032cc:	e00c      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ce:	2312      	movs	r3, #18
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2213      	movs	r2, #19
 80032d4:	18ba      	adds	r2, r7, r2
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e005      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	2312      	movs	r3, #18
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2213      	movs	r2, #19
 80032e2:	18ba      	adds	r2, r7, r2
 80032e4:	7812      	ldrb	r2, [r2, #0]
 80032e6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032e8:	2311      	movs	r3, #17
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	4b66      	ldr	r3, [pc, #408]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032f6:	4b65      	ldr	r3, [pc, #404]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032f8:	4969      	ldr	r1, [pc, #420]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003308:	4b60      	ldr	r3, [pc, #384]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	2203      	movs	r2, #3
 800330e:	4393      	bics	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4b5d      	ldr	r3, [pc, #372]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003318:	430a      	orrs	r2, r1
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2210      	movs	r2, #16
 8003322:	4013      	ands	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003326:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	4a5e      	ldr	r2, [pc, #376]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800332c:	4013      	ands	r3, r2
 800332e:	0019      	movs	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	4b55      	ldr	r3, [pc, #340]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003336:	430a      	orrs	r2, r1
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003346:	4b51      	ldr	r3, [pc, #324]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334a:	4a57      	ldr	r2, [pc, #348]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800334c:	4013      	ands	r3, r2
 800334e:	0019      	movs	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	4b4d      	ldr	r3, [pc, #308]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003356:	430a      	orrs	r2, r1
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	2380      	movs	r3, #128	@ 0x80
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4013      	ands	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003366:	4b49      	ldr	r3, [pc, #292]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	4a50      	ldr	r2, [pc, #320]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	4b45      	ldr	r3, [pc, #276]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003376:	430a      	orrs	r2, r1
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2220      	movs	r2, #32
 8003380:	4013      	ands	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003384:	4b41      	ldr	r3, [pc, #260]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	4a49      	ldr	r2, [pc, #292]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	4b3e      	ldr	r3, [pc, #248]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003394:	430a      	orrs	r2, r1
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	02db      	lsls	r3, r3, #11
 80033a0:	4013      	ands	r3, r2
 80033a2:	d016      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a4:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	4a42      	ldr	r2, [pc, #264]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	4b36      	ldr	r3, [pc, #216]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	23c0      	movs	r3, #192	@ 0xc0
 80033be:	051b      	lsls	r3, r3, #20
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d106      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80033c4:	4b31      	ldr	r3, [pc, #196]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	4b30      	ldr	r3, [pc, #192]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033ca:	2180      	movs	r1, #128	@ 0x80
 80033cc:	0449      	lsls	r1, r1, #17
 80033ce:	430a      	orrs	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2380      	movs	r3, #128	@ 0x80
 80033d8:	01db      	lsls	r3, r3, #7
 80033da:	4013      	ands	r3, r2
 80033dc:	d015      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033de:	4b2b      	ldr	r3, [pc, #172]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	0899      	lsrs	r1, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	4b28      	ldr	r3, [pc, #160]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033ec:	430a      	orrs	r2, r1
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	05db      	lsls	r3, r3, #23
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d106      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033fc:	4b23      	ldr	r3, [pc, #140]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4b22      	ldr	r3, [pc, #136]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003402:	2180      	movs	r1, #128	@ 0x80
 8003404:	0249      	lsls	r1, r1, #9
 8003406:	430a      	orrs	r2, r1
 8003408:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	039b      	lsls	r3, r3, #14
 8003412:	4013      	ands	r3, r2
 8003414:	d016      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003416:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341a:	4a27      	ldr	r2, [pc, #156]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800341c:	4013      	ands	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003426:	430a      	orrs	r2, r1
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800342e:	2380      	movs	r3, #128	@ 0x80
 8003430:	03db      	lsls	r3, r3, #15
 8003432:	429a      	cmp	r2, r3
 8003434:	d106      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	4b14      	ldr	r3, [pc, #80]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800343c:	2180      	movs	r1, #128	@ 0x80
 800343e:	0449      	lsls	r1, r1, #17
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4013      	ands	r3, r2
 800344e:	d016      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003450:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	4a19      	ldr	r2, [pc, #100]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003456:	4013      	ands	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003460:	430a      	orrs	r2, r1
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	01db      	lsls	r3, r3, #7
 800346c:	429a      	cmp	r2, r3
 800346e:	d106      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003476:	2180      	movs	r1, #128	@ 0x80
 8003478:	0249      	lsls	r1, r1, #9
 800347a:	430a      	orrs	r2, r1
 800347c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800347e:	2312      	movs	r3, #18
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	781b      	ldrb	r3, [r3, #0]
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	40007000 	.word	0x40007000
 8003494:	fffffcff 	.word	0xfffffcff
 8003498:	fffeffff 	.word	0xfffeffff
 800349c:	00001388 	.word	0x00001388
 80034a0:	efffffff 	.word	0xefffffff
 80034a4:	fffff3ff 	.word	0xfffff3ff
 80034a8:	fff3ffff 	.word	0xfff3ffff
 80034ac:	ffcfffff 	.word	0xffcfffff
 80034b0:	ffffcfff 	.word	0xffffcfff
 80034b4:	f3ffffff 	.word	0xf3ffffff
 80034b8:	ffbfffff 	.word	0xffbfffff
 80034bc:	ffff3fff 	.word	0xffff3fff

080034c0 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0ae      	b.n	8003630 <HAL_SMBUS_Init+0x170>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_SMBUS_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2244      	movs	r2, #68	@ 0x44
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7fd fbb9 	bl	8000c5c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2101      	movs	r1, #1
 80034fc:	438a      	bics	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	494b      	ldr	r1, [pc, #300]	@ (8003638 <HAL_SMBUS_Init+0x178>)
 800350a:	400a      	ands	r2, r1
 800350c:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4948      	ldr	r1, [pc, #288]	@ (800363c <HAL_SMBUS_Init+0x17c>)
 800351a:	400a      	ands	r2, r1
 800351c:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0052      	lsls	r2, r2, #1
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003536:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	493e      	ldr	r1, [pc, #248]	@ (800363c <HAL_SMBUS_Init+0x17c>)
 8003544:	400a      	ands	r2, r1
 8003546:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d014      	beq.n	800357a <HAL_SMBUS_Init+0xba>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <HAL_SMBUS_Init+0xaa>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2180      	movs	r1, #128	@ 0x80
 8003562:	0209      	lsls	r1, r1, #8
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	e007      	b.n	800357a <HAL_SMBUS_Init+0xba>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2184      	movs	r1, #132	@ 0x84
 8003574:	0209      	lsls	r1, r1, #8
 8003576:	430a      	orrs	r2, r1
 8003578:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d104      	bne.n	800358c <HAL_SMBUS_Init+0xcc>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2280      	movs	r2, #128	@ 0x80
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	492a      	ldr	r1, [pc, #168]	@ (8003640 <HAL_SMBUS_Init+0x180>)
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	0011      	movs	r1, r2
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80035c4:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	431a      	orrs	r2, r3
 80035cc:	0011      	movs	r1, r2
                           hsmbus->Init.AnalogFilter);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80035d6:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80035d8:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d112      	bne.n	800360c <HAL_SMBUS_Init+0x14c>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_SMBUS_Init+0x13a>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	039b      	lsls	r3, r3, #14
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d108      	bne.n	800360c <HAL_SMBUS_Init+0x14c>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2180      	movs	r1, #128	@ 0x80
 8003606:	0249      	lsls	r1, r1, #9
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2101      	movs	r1, #1
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}
 8003638:	f0ffffff 	.word	0xf0ffffff
 800363c:	ffff7fff 	.word	0xffff7fff
 8003640:	02008000 	.word	0x02008000

08003644 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003652:	2b01      	cmp	r3, #1
 8003654:	d137      	bne.n	80036c6 <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2244      	movs	r2, #68	@ 0x44
 800365a:	5c9b      	ldrb	r3, [r3, r2]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 8003660:	2302      	movs	r3, #2
 8003662:	e031      	b.n	80036c8 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2244      	movs	r2, #68	@ 0x44
 8003668:	2101      	movs	r1, #1
 800366a:	5499      	strb	r1, [r3, r2]

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a10      	ldr	r2, [pc, #64]	@ (80036d0 <HAL_SMBUS_ConfigDigitalFilter+0x8c>)
 800368e:	4013      	ands	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2101      	movs	r1, #1
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2244      	movs	r2, #68	@ 0x44
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b004      	add	sp, #16
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffff0ff 	.word	0xfffff0ff

080036d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e04a      	b.n	800377c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	223d      	movs	r2, #61	@ 0x3d
 80036ea:	5c9b      	ldrb	r3, [r3, r2]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	223c      	movs	r2, #60	@ 0x3c
 80036f6:	2100      	movs	r1, #0
 80036f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fd fb0f 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223d      	movs	r2, #61	@ 0x3d
 8003706:	2102      	movs	r1, #2
 8003708:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	0019      	movs	r1, r3
 8003714:	0010      	movs	r0, r2
 8003716:	f000 fa73 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2248      	movs	r2, #72	@ 0x48
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223e      	movs	r2, #62	@ 0x3e
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	223f      	movs	r2, #63	@ 0x3f
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2240      	movs	r2, #64	@ 0x40
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2241      	movs	r2, #65	@ 0x41
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2242      	movs	r2, #66	@ 0x42
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2243      	movs	r2, #67	@ 0x43
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2244      	movs	r2, #68	@ 0x44
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2245      	movs	r2, #69	@ 0x45
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2246      	movs	r2, #70	@ 0x46
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2247      	movs	r2, #71	@ 0x47
 800376e:	2101      	movs	r1, #1
 8003770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223d      	movs	r2, #61	@ 0x3d
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b002      	add	sp, #8
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e04a      	b.n	800382c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	223d      	movs	r2, #61	@ 0x3d
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d107      	bne.n	80037b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	223c      	movs	r2, #60	@ 0x3c
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f841 	bl	8003834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	223d      	movs	r2, #61	@ 0x3d
 80037b6:	2102      	movs	r1, #2
 80037b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3304      	adds	r3, #4
 80037c2:	0019      	movs	r1, r3
 80037c4:	0010      	movs	r0, r2
 80037c6:	f000 fa1b 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2248      	movs	r2, #72	@ 0x48
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	223e      	movs	r2, #62	@ 0x3e
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223f      	movs	r2, #63	@ 0x3f
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2240      	movs	r2, #64	@ 0x40
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2241      	movs	r2, #65	@ 0x41
 80037ee:	2101      	movs	r1, #1
 80037f0:	5499      	strb	r1, [r3, r2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2242      	movs	r2, #66	@ 0x42
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2243      	movs	r2, #67	@ 0x43
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2244      	movs	r2, #68	@ 0x44
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2245      	movs	r2, #69	@ 0x45
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2246      	movs	r2, #70	@ 0x46
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2247      	movs	r2, #71	@ 0x47
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223d      	movs	r2, #61	@ 0x3d
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <HAL_TIM_PWM_Start+0x22>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	223e      	movs	r2, #62	@ 0x3e
 8003858:	5c9b      	ldrb	r3, [r3, r2]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	1e5a      	subs	r2, r3, #1
 8003860:	4193      	sbcs	r3, r2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e037      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d108      	bne.n	800387e <HAL_TIM_PWM_Start+0x3a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	223f      	movs	r2, #63	@ 0x3f
 8003870:	5c9b      	ldrb	r3, [r3, r2]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	1e5a      	subs	r2, r3, #1
 8003878:	4193      	sbcs	r3, r2
 800387a:	b2db      	uxtb	r3, r3
 800387c:	e02b      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d108      	bne.n	8003896 <HAL_TIM_PWM_Start+0x52>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2240      	movs	r2, #64	@ 0x40
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	4193      	sbcs	r3, r2
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e01f      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d108      	bne.n	80038ae <HAL_TIM_PWM_Start+0x6a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2241      	movs	r2, #65	@ 0x41
 80038a0:	5c9b      	ldrb	r3, [r3, r2]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	1e5a      	subs	r2, r3, #1
 80038a8:	4193      	sbcs	r3, r2
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e013      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d108      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x82>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2242      	movs	r2, #66	@ 0x42
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	4193      	sbcs	r3, r2
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e007      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2243      	movs	r2, #67	@ 0x43
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	4193      	sbcs	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e081      	b.n	80039e2 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0xaa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	223e      	movs	r2, #62	@ 0x3e
 80038e8:	2102      	movs	r1, #2
 80038ea:	5499      	strb	r1, [r3, r2]
 80038ec:	e023      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_PWM_Start+0xba>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	223f      	movs	r2, #63	@ 0x3f
 80038f8:	2102      	movs	r1, #2
 80038fa:	5499      	strb	r1, [r3, r2]
 80038fc:	e01b      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Start+0xca>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2240      	movs	r2, #64	@ 0x40
 8003908:	2102      	movs	r1, #2
 800390a:	5499      	strb	r1, [r3, r2]
 800390c:	e013      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b0c      	cmp	r3, #12
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Start+0xda>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2241      	movs	r2, #65	@ 0x41
 8003918:	2102      	movs	r1, #2
 800391a:	5499      	strb	r1, [r3, r2]
 800391c:	e00b      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b10      	cmp	r3, #16
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Start+0xea>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2242      	movs	r2, #66	@ 0x42
 8003928:	2102      	movs	r1, #2
 800392a:	5499      	strb	r1, [r3, r2]
 800392c:	e003      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2243      	movs	r2, #67	@ 0x43
 8003932:	2102      	movs	r1, #2
 8003934:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6839      	ldr	r1, [r7, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	0018      	movs	r0, r3
 8003940:	f000 fc7e 	bl	8004240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a28      	ldr	r2, [pc, #160]	@ (80039ec <HAL_TIM_PWM_Start+0x1a8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_TIM_PWM_Start+0x11e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a27      	ldr	r2, [pc, #156]	@ (80039f0 <HAL_TIM_PWM_Start+0x1ac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_TIM_PWM_Start+0x11e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a25      	ldr	r2, [pc, #148]	@ (80039f4 <HAL_TIM_PWM_Start+0x1b0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_Start+0x122>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_TIM_PWM_Start+0x124>
 8003966:	2300      	movs	r3, #0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2180      	movs	r1, #128	@ 0x80
 8003978:	0209      	lsls	r1, r1, #8
 800397a:	430a      	orrs	r2, r1
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1a      	ldr	r2, [pc, #104]	@ (80039ec <HAL_TIM_PWM_Start+0x1a8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00a      	beq.n	800399e <HAL_TIM_PWM_Start+0x15a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	05db      	lsls	r3, r3, #23
 8003990:	429a      	cmp	r2, r3
 8003992:	d004      	beq.n	800399e <HAL_TIM_PWM_Start+0x15a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <HAL_TIM_PWM_Start+0x1b4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d116      	bne.n	80039cc <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a15      	ldr	r2, [pc, #84]	@ (80039fc <HAL_TIM_PWM_Start+0x1b8>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d016      	beq.n	80039de <HAL_TIM_PWM_Start+0x19a>
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	2380      	movs	r3, #128	@ 0x80
 80039b4:	025b      	lsls	r3, r3, #9
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d011      	beq.n	80039de <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ca:	e008      	b.n	80039de <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e000      	b.n	80039e0 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40014800 	.word	0x40014800
 80039f8:	40000400 	.word	0x40000400
 80039fc:	00010007 	.word	0x00010007

08003a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2317      	movs	r3, #23
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	223c      	movs	r2, #60	@ 0x3c
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0e5      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	223c      	movs	r2, #60	@ 0x3c
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b14      	cmp	r3, #20
 8003a2e:	d900      	bls.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a30:	e0d1      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	009a      	lsls	r2, r3, #2
 8003a36:	4b70      	ldr	r3, [pc, #448]	@ (8003bf8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	0011      	movs	r1, r2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 f95e 	bl	8003d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2108      	movs	r1, #8
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2104      	movs	r1, #4
 8003a68:	438a      	bics	r2, r1
 8003a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6999      	ldr	r1, [r3, #24]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	619a      	str	r2, [r3, #24]
      break;
 8003a7e:	e0af      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 f9bd 	bl	8003e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2180      	movs	r1, #128	@ 0x80
 8003a9a:	0109      	lsls	r1, r1, #4
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4954      	ldr	r1, [pc, #336]	@ (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003aac:	400a      	ands	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e08c      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	0011      	movs	r1, r2
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 fa18 	bl	8003f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2108      	movs	r1, #8
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2104      	movs	r1, #4
 8003af0:	438a      	bics	r2, r1
 8003af2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69d9      	ldr	r1, [r3, #28]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	61da      	str	r2, [r3, #28]
      break;
 8003b06:	e06b      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	0011      	movs	r1, r2
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 fa79 	bl	8004008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	0109      	lsls	r1, r1, #4
 8003b24:	430a      	orrs	r2, r1
 8003b26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4932      	ldr	r1, [pc, #200]	@ (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69d9      	ldr	r1, [r3, #28]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	61da      	str	r2, [r3, #28]
      break;
 8003b4c:	e048      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 faba 	bl	80040d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2108      	movs	r1, #8
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2104      	movs	r1, #4
 8003b78:	438a      	bics	r2, r1
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b8e:	e027      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 faf3 	bl	8004184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2180      	movs	r1, #128	@ 0x80
 8003baa:	0109      	lsls	r1, r1, #4
 8003bac:	430a      	orrs	r2, r1
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4910      	ldr	r1, [pc, #64]	@ (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	021a      	lsls	r2, r3, #8
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bd4:	e004      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003bd6:	2317      	movs	r3, #23
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
      break;
 8003bde:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	223c      	movs	r2, #60	@ 0x3c
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]

  return status;
 8003be8:	2317      	movs	r3, #23
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b006      	add	sp, #24
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	080058dc 	.word	0x080058dc
 8003bfc:	fffffbff 	.word	0xfffffbff

08003c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a37      	ldr	r2, [pc, #220]	@ (8003cf0 <TIM_Base_SetConfig+0xf0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d008      	beq.n	8003c2a <TIM_Base_SetConfig+0x2a>
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	2380      	movs	r3, #128	@ 0x80
 8003c1c:	05db      	lsls	r3, r3, #23
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0x2a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a33      	ldr	r2, [pc, #204]	@ (8003cf4 <TIM_Base_SetConfig+0xf4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2270      	movs	r2, #112	@ 0x70
 8003c2e:	4393      	bics	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf0 <TIM_Base_SetConfig+0xf0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d014      	beq.n	8003c6e <TIM_Base_SetConfig+0x6e>
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	2380      	movs	r3, #128	@ 0x80
 8003c48:	05db      	lsls	r3, r3, #23
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d00f      	beq.n	8003c6e <TIM_Base_SetConfig+0x6e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a28      	ldr	r2, [pc, #160]	@ (8003cf4 <TIM_Base_SetConfig+0xf4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_Base_SetConfig+0x6e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a27      	ldr	r2, [pc, #156]	@ (8003cf8 <TIM_Base_SetConfig+0xf8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_Base_SetConfig+0x6e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a26      	ldr	r2, [pc, #152]	@ (8003cfc <TIM_Base_SetConfig+0xfc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0x6e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a25      	ldr	r2, [pc, #148]	@ (8003d00 <TIM_Base_SetConfig+0x100>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a24      	ldr	r2, [pc, #144]	@ (8003d04 <TIM_Base_SetConfig+0x104>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2280      	movs	r2, #128	@ 0x80
 8003c84:	4393      	bics	r3, r2
 8003c86:	001a      	movs	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a11      	ldr	r2, [pc, #68]	@ (8003cf0 <TIM_Base_SetConfig+0xf0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0xbe>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <TIM_Base_SetConfig+0xfc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0xbe>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a11      	ldr	r2, [pc, #68]	@ (8003d00 <TIM_Base_SetConfig+0x100>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d103      	bne.n	8003cc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d106      	bne.n	8003ce6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4393      	bics	r3, r2
 8003ce0:	001a      	movs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	611a      	str	r2, [r3, #16]
  }
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b004      	add	sp, #16
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40002000 	.word	0x40002000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800
 8003d04:	fffffcff 	.word	0xfffffcff

08003d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4393      	bics	r3, r2
 8003d20:	001a      	movs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a2e      	ldr	r2, [pc, #184]	@ (8003df0 <TIM_OC1_SetConfig+0xe8>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	4393      	bics	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	4393      	bics	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a24      	ldr	r2, [pc, #144]	@ (8003df4 <TIM_OC1_SetConfig+0xec>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <TIM_OC1_SetConfig+0x6e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a23      	ldr	r2, [pc, #140]	@ (8003df8 <TIM_OC1_SetConfig+0xf0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_OC1_SetConfig+0x6e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a22      	ldr	r2, [pc, #136]	@ (8003dfc <TIM_OC1_SetConfig+0xf4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4393      	bics	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <TIM_OC1_SetConfig+0xec>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_OC1_SetConfig+0xa0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	@ (8003df8 <TIM_OC1_SetConfig+0xf0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC1_SetConfig+0xa0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a16      	ldr	r2, [pc, #88]	@ (8003dfc <TIM_OC1_SetConfig+0xf4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <TIM_OC1_SetConfig+0xf8>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4a14      	ldr	r2, [pc, #80]	@ (8003e04 <TIM_OC1_SetConfig+0xfc>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b006      	add	sp, #24
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	fffeff8f 	.word	0xfffeff8f
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800
 8003e00:	fffffeff 	.word	0xfffffeff
 8003e04:	fffffdff 	.word	0xfffffdff

08003e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	4393      	bics	r3, r2
 8003e20:	001a      	movs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee8 <TIM_OC2_SetConfig+0xe0>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003eec <TIM_OC2_SetConfig+0xe4>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2220      	movs	r2, #32
 8003e52:	4393      	bics	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a22      	ldr	r2, [pc, #136]	@ (8003ef0 <TIM_OC2_SetConfig+0xe8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2280      	movs	r2, #128	@ 0x80
 8003e6e:	4393      	bics	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2240      	movs	r2, #64	@ 0x40
 8003e82:	4393      	bics	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <TIM_OC2_SetConfig+0xe8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_OC2_SetConfig+0x96>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a18      	ldr	r2, [pc, #96]	@ (8003ef4 <TIM_OC2_SetConfig+0xec>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_OC2_SetConfig+0x96>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <TIM_OC2_SetConfig+0xf0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d113      	bne.n	8003ec6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <TIM_OC2_SetConfig+0xf4>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <TIM_OC2_SetConfig+0xf8>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	621a      	str	r2, [r3, #32]
}
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b006      	add	sp, #24
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	feff8fff 	.word	0xfeff8fff
 8003eec:	fffffcff 	.word	0xfffffcff
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	fffffbff 	.word	0xfffffbff
 8003f00:	fffff7ff 	.word	0xfffff7ff

08003f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	4a31      	ldr	r2, [pc, #196]	@ (8003fe0 <TIM_OC3_SetConfig+0xdc>)
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe4 <TIM_OC3_SetConfig+0xe0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2203      	movs	r2, #3
 8003f38:	4393      	bics	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4a27      	ldr	r2, [pc, #156]	@ (8003fe8 <TIM_OC3_SetConfig+0xe4>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	@ (8003fec <TIM_OC3_SetConfig+0xe8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d10d      	bne.n	8003f7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4a22      	ldr	r2, [pc, #136]	@ (8003ff0 <TIM_OC3_SetConfig+0xec>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <TIM_OC3_SetConfig+0xf0>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1a      	ldr	r2, [pc, #104]	@ (8003fec <TIM_OC3_SetConfig+0xe8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d007      	beq.n	8003f96 <TIM_OC3_SetConfig+0x92>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <TIM_OC3_SetConfig+0xf4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_OC3_SetConfig+0x92>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1a      	ldr	r2, [pc, #104]	@ (8003ffc <TIM_OC3_SetConfig+0xf8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d113      	bne.n	8003fbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4a19      	ldr	r2, [pc, #100]	@ (8004000 <TIM_OC3_SetConfig+0xfc>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	@ (8004004 <TIM_OC3_SetConfig+0x100>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b006      	add	sp, #24
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	fffffeff 	.word	0xfffffeff
 8003fe4:	fffeff8f 	.word	0xfffeff8f
 8003fe8:	fffffdff 	.word	0xfffffdff
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	fffff7ff 	.word	0xfffff7ff
 8003ff4:	fffffbff 	.word	0xfffffbff
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800
 8004000:	ffffefff 	.word	0xffffefff
 8004004:	ffffdfff 	.word	0xffffdfff

08004008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4a24      	ldr	r2, [pc, #144]	@ (80040b0 <TIM_OC4_SetConfig+0xa8>)
 800401e:	401a      	ands	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a20      	ldr	r2, [pc, #128]	@ (80040b4 <TIM_OC4_SetConfig+0xac>)
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <TIM_OC4_SetConfig+0xb0>)
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <TIM_OC4_SetConfig+0xb4>)
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <TIM_OC4_SetConfig+0xb8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_OC4_SetConfig+0x70>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <TIM_OC4_SetConfig+0xbc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_OC4_SetConfig+0x70>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a15      	ldr	r2, [pc, #84]	@ (80040c8 <TIM_OC4_SetConfig+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d109      	bne.n	800408c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <TIM_OC4_SetConfig+0xc4>)
 800407c:	4013      	ands	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b006      	add	sp, #24
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	ffffefff 	.word	0xffffefff
 80040b4:	feff8fff 	.word	0xfeff8fff
 80040b8:	fffffcff 	.word	0xfffffcff
 80040bc:	ffffdfff 	.word	0xffffdfff
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800
 80040cc:	ffffbfff 	.word	0xffffbfff

080040d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	4a21      	ldr	r2, [pc, #132]	@ (800416c <TIM_OC5_SetConfig+0x9c>)
 80040e6:	401a      	ands	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <TIM_OC5_SetConfig+0xa0>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <TIM_OC5_SetConfig+0xa4>)
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <TIM_OC5_SetConfig+0xa8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <TIM_OC5_SetConfig+0x66>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a14      	ldr	r2, [pc, #80]	@ (800417c <TIM_OC5_SetConfig+0xac>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <TIM_OC5_SetConfig+0x66>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a13      	ldr	r2, [pc, #76]	@ (8004180 <TIM_OC5_SetConfig+0xb0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d109      	bne.n	800414a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4a0c      	ldr	r2, [pc, #48]	@ (800416c <TIM_OC5_SetConfig+0x9c>)
 800413a:	4013      	ands	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b006      	add	sp, #24
 800416a:	bd80      	pop	{r7, pc}
 800416c:	fffeffff 	.word	0xfffeffff
 8004170:	fffeff8f 	.word	0xfffeff8f
 8004174:	fffdffff 	.word	0xfffdffff
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800

08004184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4a22      	ldr	r2, [pc, #136]	@ (8004224 <TIM_OC6_SetConfig+0xa0>)
 800419a:	401a      	ands	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004228 <TIM_OC6_SetConfig+0xa4>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4a1a      	ldr	r2, [pc, #104]	@ (800422c <TIM_OC6_SetConfig+0xa8>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	051b      	lsls	r3, r3, #20
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a16      	ldr	r2, [pc, #88]	@ (8004230 <TIM_OC6_SetConfig+0xac>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_OC6_SetConfig+0x68>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a15      	ldr	r2, [pc, #84]	@ (8004234 <TIM_OC6_SetConfig+0xb0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_OC6_SetConfig+0x68>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a14      	ldr	r2, [pc, #80]	@ (8004238 <TIM_OC6_SetConfig+0xb4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d109      	bne.n	8004200 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4a13      	ldr	r2, [pc, #76]	@ (800423c <TIM_OC6_SetConfig+0xb8>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	029b      	lsls	r3, r3, #10
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b006      	add	sp, #24
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	ffefffff 	.word	0xffefffff
 8004228:	feff8fff 	.word	0xfeff8fff
 800422c:	ffdfffff 	.word	0xffdfffff
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	fffbffff 	.word	0xfffbffff

08004240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	221f      	movs	r2, #31
 8004250:	4013      	ands	r3, r2
 8004252:	2201      	movs	r2, #1
 8004254:	409a      	lsls	r2, r3
 8004256:	0013      	movs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	43d2      	mvns	r2, r2
 8004262:	401a      	ands	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	211f      	movs	r1, #31
 8004270:	400b      	ands	r3, r1
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4099      	lsls	r1, r3
 8004276:	000b      	movs	r3, r1
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b006      	add	sp, #24
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	223c      	movs	r2, #60	@ 0x3c
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e06f      	b.n	8004384 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223c      	movs	r2, #60	@ 0x3c
 80042a8:	2101      	movs	r1, #1
 80042aa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	22ff      	movs	r2, #255	@ 0xff
 80042b0:	4393      	bics	r3, r2
 80042b2:	001a      	movs	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a33      	ldr	r2, [pc, #204]	@ (800438c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80042c0:	401a      	ands	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a30      	ldr	r2, [pc, #192]	@ (8004390 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80042ce:	401a      	ands	r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a2e      	ldr	r2, [pc, #184]	@ (8004394 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80042dc:	401a      	ands	r2, r3
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004398 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80042ea:	401a      	ands	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a29      	ldr	r2, [pc, #164]	@ (800439c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80042f8:	401a      	ands	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004306:	401a      	ands	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a24      	ldr	r2, [pc, #144]	@ (80043a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004314:	401a      	ands	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a21      	ldr	r2, [pc, #132]	@ (80043a8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004324:	401a      	ands	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d11c      	bne.n	8004372 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800433c:	401a      	ands	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	051b      	lsls	r3, r3, #20
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800434c:	401a      	ands	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a17      	ldr	r2, [pc, #92]	@ (80043b8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800435a:	401a      	ands	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a15      	ldr	r2, [pc, #84]	@ (80043bc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004368:	401a      	ands	r2, r3
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	223c      	movs	r2, #60	@ 0x3c
 800437e:	2100      	movs	r1, #0
 8004380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b004      	add	sp, #16
 800438a:	bd80      	pop	{r7, pc}
 800438c:	fffffcff 	.word	0xfffffcff
 8004390:	fffffbff 	.word	0xfffffbff
 8004394:	fffff7ff 	.word	0xfffff7ff
 8004398:	ffffefff 	.word	0xffffefff
 800439c:	ffffdfff 	.word	0xffffdfff
 80043a0:	ffffbfff 	.word	0xffffbfff
 80043a4:	fff0ffff 	.word	0xfff0ffff
 80043a8:	efffffff 	.word	0xefffffff
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	ff0fffff 	.word	0xff0fffff
 80043b4:	feffffff 	.word	0xfeffffff
 80043b8:	fdffffff 	.word	0xfdffffff
 80043bc:	dfffffff 	.word	0xdfffffff

080043c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e046      	b.n	8004460 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2288      	movs	r2, #136	@ 0x88
 80043d6:	589b      	ldr	r3, [r3, r2]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d107      	bne.n	80043ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2284      	movs	r2, #132	@ 0x84
 80043e0:	2100      	movs	r1, #0
 80043e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7fc fcf8 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2288      	movs	r2, #136	@ 0x88
 80043f0:	2124      	movs	r1, #36	@ 0x24
 80043f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2101      	movs	r1, #1
 8004400:	438a      	bics	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0018      	movs	r0, r3
 8004410:	f000 fb48 	bl	8004aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f8cc 	bl	80045b4 <UART_SetConfig>
 800441c:	0003      	movs	r3, r0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e01c      	b.n	8004460 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	490d      	ldr	r1, [pc, #52]	@ (8004468 <HAL_UART_Init+0xa8>)
 8004432:	400a      	ands	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	212a      	movs	r1, #42	@ 0x2a
 8004442:	438a      	bics	r2, r1
 8004444:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0018      	movs	r0, r3
 800445a:	f000 fbd7 	bl	8004c0c <UART_CheckIdleState>
 800445e:	0003      	movs	r3, r0
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}
 8004468:	ffffb7ff 	.word	0xffffb7ff

0800446c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	@ 0x28
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	1dbb      	adds	r3, r7, #6
 800447a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2288      	movs	r2, #136	@ 0x88
 8004480:	589b      	ldr	r3, [r3, r2]
 8004482:	2b20      	cmp	r3, #32
 8004484:	d000      	beq.n	8004488 <HAL_UART_Transmit+0x1c>
 8004486:	e090      	b.n	80045aa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_UART_Transmit+0x2a>
 800448e:	1dbb      	adds	r3, r7, #6
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e088      	b.n	80045ac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	015b      	lsls	r3, r3, #5
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d109      	bne.n	80044ba <HAL_UART_Transmit+0x4e>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2201      	movs	r2, #1
 80044b2:	4013      	ands	r3, r2
 80044b4:	d001      	beq.n	80044ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e078      	b.n	80045ac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2290      	movs	r2, #144	@ 0x90
 80044be:	2100      	movs	r1, #0
 80044c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2288      	movs	r2, #136	@ 0x88
 80044c6:	2121      	movs	r1, #33	@ 0x21
 80044c8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ca:	f7fc fde7 	bl	800109c <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1dba      	adds	r2, r7, #6
 80044d6:	2154      	movs	r1, #84	@ 0x54
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1dba      	adds	r2, r7, #6
 80044e0:	2156      	movs	r1, #86	@ 0x56
 80044e2:	8812      	ldrh	r2, [r2, #0]
 80044e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	2380      	movs	r3, #128	@ 0x80
 80044ec:	015b      	lsls	r3, r3, #5
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d108      	bne.n	8004504 <HAL_UART_Transmit+0x98>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e003      	b.n	800450c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800450c:	e030      	b.n	8004570 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	0013      	movs	r3, r2
 8004518:	2200      	movs	r2, #0
 800451a:	2180      	movs	r1, #128	@ 0x80
 800451c:	f000 fc20 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d005      	beq.n	8004530 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2288      	movs	r2, #136	@ 0x88
 8004528:	2120      	movs	r1, #32
 800452a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e03d      	b.n	80045ac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	001a      	movs	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	05d2      	lsls	r2, r2, #23
 8004542:	0dd2      	lsrs	r2, r2, #23
 8004544:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3302      	adds	r3, #2
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e007      	b.n	800455e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	3301      	adds	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2256      	movs	r2, #86	@ 0x56
 8004562:	5a9b      	ldrh	r3, [r3, r2]
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b299      	uxth	r1, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2256      	movs	r2, #86	@ 0x56
 800456e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2256      	movs	r2, #86	@ 0x56
 8004574:	5a9b      	ldrh	r3, [r3, r2]
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1c8      	bne.n	800450e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	0013      	movs	r3, r2
 8004586:	2200      	movs	r2, #0
 8004588:	2140      	movs	r1, #64	@ 0x40
 800458a:	f000 fbe9 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d005      	beq.n	800459e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2288      	movs	r2, #136	@ 0x88
 8004596:	2120      	movs	r1, #32
 8004598:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e006      	b.n	80045ac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2288      	movs	r2, #136	@ 0x88
 80045a2:	2120      	movs	r1, #32
 80045a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
  }
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b008      	add	sp, #32
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b5b0      	push	{r4, r5, r7, lr}
 80045b6:	b090      	sub	sp, #64	@ 0x40
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045bc:	231a      	movs	r3, #26
 80045be:	2220      	movs	r2, #32
 80045c0:	189b      	adds	r3, r3, r2
 80045c2:	19db      	adds	r3, r3, r7
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4313      	orrs	r3, r2
 80045de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4ac4      	ldr	r2, [pc, #784]	@ (80048f8 <UART_SetConfig+0x344>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4abf      	ldr	r2, [pc, #764]	@ (80048fc <UART_SetConfig+0x348>)
 80045fe:	4013      	ands	r3, r2
 8004600:	0018      	movs	r0, r3
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	68d9      	ldr	r1, [r3, #12]
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	0003      	movs	r3, r0
 800460c:	430b      	orrs	r3, r1
 800460e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4ab9      	ldr	r2, [pc, #740]	@ (8004900 <UART_SetConfig+0x34c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004626:	4313      	orrs	r3, r2
 8004628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4ab4      	ldr	r2, [pc, #720]	@ (8004904 <UART_SetConfig+0x350>)
 8004632:	4013      	ands	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800463c:	430b      	orrs	r3, r1
 800463e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	220f      	movs	r2, #15
 8004648:	4393      	bics	r3, r2
 800464a:	0018      	movs	r0, r3
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	0003      	movs	r3, r0
 8004656:	430b      	orrs	r3, r1
 8004658:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4aaa      	ldr	r2, [pc, #680]	@ (8004908 <UART_SetConfig+0x354>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d131      	bne.n	80046c8 <UART_SetConfig+0x114>
 8004664:	4ba9      	ldr	r3, [pc, #676]	@ (800490c <UART_SetConfig+0x358>)
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	2203      	movs	r2, #3
 800466a:	4013      	ands	r3, r2
 800466c:	2b03      	cmp	r3, #3
 800466e:	d01d      	beq.n	80046ac <UART_SetConfig+0xf8>
 8004670:	d823      	bhi.n	80046ba <UART_SetConfig+0x106>
 8004672:	2b02      	cmp	r3, #2
 8004674:	d00c      	beq.n	8004690 <UART_SetConfig+0xdc>
 8004676:	d820      	bhi.n	80046ba <UART_SetConfig+0x106>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <UART_SetConfig+0xce>
 800467c:	2b01      	cmp	r3, #1
 800467e:	d00e      	beq.n	800469e <UART_SetConfig+0xea>
 8004680:	e01b      	b.n	80046ba <UART_SetConfig+0x106>
 8004682:	231b      	movs	r3, #27
 8004684:	2220      	movs	r2, #32
 8004686:	189b      	adds	r3, r3, r2
 8004688:	19db      	adds	r3, r3, r7
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e071      	b.n	8004774 <UART_SetConfig+0x1c0>
 8004690:	231b      	movs	r3, #27
 8004692:	2220      	movs	r2, #32
 8004694:	189b      	adds	r3, r3, r2
 8004696:	19db      	adds	r3, r3, r7
 8004698:	2202      	movs	r2, #2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e06a      	b.n	8004774 <UART_SetConfig+0x1c0>
 800469e:	231b      	movs	r3, #27
 80046a0:	2220      	movs	r2, #32
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	19db      	adds	r3, r3, r7
 80046a6:	2204      	movs	r2, #4
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e063      	b.n	8004774 <UART_SetConfig+0x1c0>
 80046ac:	231b      	movs	r3, #27
 80046ae:	2220      	movs	r2, #32
 80046b0:	189b      	adds	r3, r3, r2
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	2208      	movs	r2, #8
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e05c      	b.n	8004774 <UART_SetConfig+0x1c0>
 80046ba:	231b      	movs	r3, #27
 80046bc:	2220      	movs	r2, #32
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	19db      	adds	r3, r3, r7
 80046c2:	2210      	movs	r2, #16
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e055      	b.n	8004774 <UART_SetConfig+0x1c0>
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a90      	ldr	r2, [pc, #576]	@ (8004910 <UART_SetConfig+0x35c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d106      	bne.n	80046e0 <UART_SetConfig+0x12c>
 80046d2:	231b      	movs	r3, #27
 80046d4:	2220      	movs	r2, #32
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	19db      	adds	r3, r3, r7
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e049      	b.n	8004774 <UART_SetConfig+0x1c0>
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a86      	ldr	r2, [pc, #536]	@ (8004900 <UART_SetConfig+0x34c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d13e      	bne.n	8004768 <UART_SetConfig+0x1b4>
 80046ea:	4b88      	ldr	r3, [pc, #544]	@ (800490c <UART_SetConfig+0x358>)
 80046ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046ee:	23c0      	movs	r3, #192	@ 0xc0
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	4013      	ands	r3, r2
 80046f4:	22c0      	movs	r2, #192	@ 0xc0
 80046f6:	0112      	lsls	r2, r2, #4
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d027      	beq.n	800474c <UART_SetConfig+0x198>
 80046fc:	22c0      	movs	r2, #192	@ 0xc0
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	4293      	cmp	r3, r2
 8004702:	d82a      	bhi.n	800475a <UART_SetConfig+0x1a6>
 8004704:	2280      	movs	r2, #128	@ 0x80
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	4293      	cmp	r3, r2
 800470a:	d011      	beq.n	8004730 <UART_SetConfig+0x17c>
 800470c:	2280      	movs	r2, #128	@ 0x80
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	4293      	cmp	r3, r2
 8004712:	d822      	bhi.n	800475a <UART_SetConfig+0x1a6>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <UART_SetConfig+0x16e>
 8004718:	2280      	movs	r2, #128	@ 0x80
 800471a:	00d2      	lsls	r2, r2, #3
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <UART_SetConfig+0x18a>
 8004720:	e01b      	b.n	800475a <UART_SetConfig+0x1a6>
 8004722:	231b      	movs	r3, #27
 8004724:	2220      	movs	r2, #32
 8004726:	189b      	adds	r3, r3, r2
 8004728:	19db      	adds	r3, r3, r7
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e021      	b.n	8004774 <UART_SetConfig+0x1c0>
 8004730:	231b      	movs	r3, #27
 8004732:	2220      	movs	r2, #32
 8004734:	189b      	adds	r3, r3, r2
 8004736:	19db      	adds	r3, r3, r7
 8004738:	2202      	movs	r2, #2
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e01a      	b.n	8004774 <UART_SetConfig+0x1c0>
 800473e:	231b      	movs	r3, #27
 8004740:	2220      	movs	r2, #32
 8004742:	189b      	adds	r3, r3, r2
 8004744:	19db      	adds	r3, r3, r7
 8004746:	2204      	movs	r2, #4
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e013      	b.n	8004774 <UART_SetConfig+0x1c0>
 800474c:	231b      	movs	r3, #27
 800474e:	2220      	movs	r2, #32
 8004750:	189b      	adds	r3, r3, r2
 8004752:	19db      	adds	r3, r3, r7
 8004754:	2208      	movs	r2, #8
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e00c      	b.n	8004774 <UART_SetConfig+0x1c0>
 800475a:	231b      	movs	r3, #27
 800475c:	2220      	movs	r2, #32
 800475e:	189b      	adds	r3, r3, r2
 8004760:	19db      	adds	r3, r3, r7
 8004762:	2210      	movs	r2, #16
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e005      	b.n	8004774 <UART_SetConfig+0x1c0>
 8004768:	231b      	movs	r3, #27
 800476a:	2220      	movs	r2, #32
 800476c:	189b      	adds	r3, r3, r2
 800476e:	19db      	adds	r3, r3, r7
 8004770:	2210      	movs	r2, #16
 8004772:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a61      	ldr	r2, [pc, #388]	@ (8004900 <UART_SetConfig+0x34c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d000      	beq.n	8004780 <UART_SetConfig+0x1cc>
 800477e:	e092      	b.n	80048a6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004780:	231b      	movs	r3, #27
 8004782:	2220      	movs	r2, #32
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b08      	cmp	r3, #8
 800478c:	d015      	beq.n	80047ba <UART_SetConfig+0x206>
 800478e:	dc18      	bgt.n	80047c2 <UART_SetConfig+0x20e>
 8004790:	2b04      	cmp	r3, #4
 8004792:	d00d      	beq.n	80047b0 <UART_SetConfig+0x1fc>
 8004794:	dc15      	bgt.n	80047c2 <UART_SetConfig+0x20e>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <UART_SetConfig+0x1ec>
 800479a:	2b02      	cmp	r3, #2
 800479c:	d005      	beq.n	80047aa <UART_SetConfig+0x1f6>
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fe fce0 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 80047a4:	0003      	movs	r3, r0
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047a8:	e014      	b.n	80047d4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004914 <UART_SetConfig+0x360>)
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047ae:	e011      	b.n	80047d4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b0:	f7fe fc4c 	bl	800304c <HAL_RCC_GetSysClockFreq>
 80047b4:	0003      	movs	r3, r0
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047b8:	e00c      	b.n	80047d4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047c0:	e008      	b.n	80047d4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80047c6:	231a      	movs	r3, #26
 80047c8:	2220      	movs	r2, #32
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	19db      	adds	r3, r3, r7
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
        break;
 80047d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d100      	bne.n	80047dc <UART_SetConfig+0x228>
 80047da:	e147      	b.n	8004a6c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004918 <UART_SetConfig+0x364>)
 80047e2:	0052      	lsls	r2, r2, #1
 80047e4:	5ad3      	ldrh	r3, [r2, r3]
 80047e6:	0019      	movs	r1, r3
 80047e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80047ea:	f7fb fc9f 	bl	800012c <__udivsi3>
 80047ee:	0003      	movs	r3, r0
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	0013      	movs	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047fe:	429a      	cmp	r2, r3
 8004800:	d305      	bcc.n	800480e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800480a:	429a      	cmp	r2, r3
 800480c:	d906      	bls.n	800481c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800480e:	231a      	movs	r3, #26
 8004810:	2220      	movs	r2, #32
 8004812:	189b      	adds	r3, r3, r2
 8004814:	19db      	adds	r3, r3, r7
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e127      	b.n	8004a6c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800481c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004828:	4b3b      	ldr	r3, [pc, #236]	@ (8004918 <UART_SetConfig+0x364>)
 800482a:	0052      	lsls	r2, r2, #1
 800482c:	5ad3      	ldrh	r3, [r2, r3]
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	69b8      	ldr	r0, [r7, #24]
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	f7fb fd02 	bl	8000244 <__aeabi_uldivmod>
 8004840:	0002      	movs	r2, r0
 8004842:	000b      	movs	r3, r1
 8004844:	0e11      	lsrs	r1, r2, #24
 8004846:	021d      	lsls	r5, r3, #8
 8004848:	430d      	orrs	r5, r1
 800484a:	0214      	lsls	r4, r2, #8
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68b8      	ldr	r0, [r7, #8]
 800485a:	68f9      	ldr	r1, [r7, #12]
 800485c:	1900      	adds	r0, r0, r4
 800485e:	4169      	adcs	r1, r5
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f7fb fce9 	bl	8000244 <__aeabi_uldivmod>
 8004872:	0002      	movs	r2, r0
 8004874:	000b      	movs	r3, r1
 8004876:	0013      	movs	r3, r2
 8004878:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800487a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800487c:	23c0      	movs	r3, #192	@ 0xc0
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	429a      	cmp	r2, r3
 8004882:	d309      	bcc.n	8004898 <UART_SetConfig+0x2e4>
 8004884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004886:	2380      	movs	r3, #128	@ 0x80
 8004888:	035b      	lsls	r3, r3, #13
 800488a:	429a      	cmp	r2, r3
 800488c:	d204      	bcs.n	8004898 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	e0e9      	b.n	8004a6c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004898:	231a      	movs	r3, #26
 800489a:	2220      	movs	r2, #32
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e0e2      	b.n	8004a6c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	2380      	movs	r3, #128	@ 0x80
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d000      	beq.n	80048b4 <UART_SetConfig+0x300>
 80048b2:	e083      	b.n	80049bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80048b4:	231b      	movs	r3, #27
 80048b6:	2220      	movs	r2, #32
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	19db      	adds	r3, r3, r7
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d015      	beq.n	80048ee <UART_SetConfig+0x33a>
 80048c2:	dc2b      	bgt.n	800491c <UART_SetConfig+0x368>
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d00d      	beq.n	80048e4 <UART_SetConfig+0x330>
 80048c8:	dc28      	bgt.n	800491c <UART_SetConfig+0x368>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <UART_SetConfig+0x320>
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d005      	beq.n	80048de <UART_SetConfig+0x32a>
 80048d2:	e023      	b.n	800491c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7fe fc46 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 80048d8:	0003      	movs	r3, r0
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048dc:	e027      	b.n	800492e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <UART_SetConfig+0x360>)
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048e2:	e024      	b.n	800492e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e4:	f7fe fbb2 	bl	800304c <HAL_RCC_GetSysClockFreq>
 80048e8:	0003      	movs	r3, r0
 80048ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048ec:	e01f      	b.n	800492e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	2380      	movs	r3, #128	@ 0x80
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048f4:	e01b      	b.n	800492e <UART_SetConfig+0x37a>
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	cfff69f3 	.word	0xcfff69f3
 80048fc:	ffffcfff 	.word	0xffffcfff
 8004900:	40008000 	.word	0x40008000
 8004904:	11fff4ff 	.word	0x11fff4ff
 8004908:	40013800 	.word	0x40013800
 800490c:	40021000 	.word	0x40021000
 8004910:	40004400 	.word	0x40004400
 8004914:	00f42400 	.word	0x00f42400
 8004918:	08005930 	.word	0x08005930
      default:
        pclk = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004920:	231a      	movs	r3, #26
 8004922:	2220      	movs	r2, #32
 8004924:	189b      	adds	r3, r3, r2
 8004926:	19db      	adds	r3, r3, r7
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
        break;
 800492c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800492e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004930:	2b00      	cmp	r3, #0
 8004932:	d100      	bne.n	8004936 <UART_SetConfig+0x382>
 8004934:	e09a      	b.n	8004a6c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800493a:	4b58      	ldr	r3, [pc, #352]	@ (8004a9c <UART_SetConfig+0x4e8>)
 800493c:	0052      	lsls	r2, r2, #1
 800493e:	5ad3      	ldrh	r3, [r2, r3]
 8004940:	0019      	movs	r1, r3
 8004942:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004944:	f7fb fbf2 	bl	800012c <__udivsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	005a      	lsls	r2, r3, #1
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	18d2      	adds	r2, r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0019      	movs	r1, r3
 800495a:	0010      	movs	r0, r2
 800495c:	f7fb fbe6 	bl	800012c <__udivsi3>
 8004960:	0003      	movs	r3, r0
 8004962:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	2b0f      	cmp	r3, #15
 8004968:	d921      	bls.n	80049ae <UART_SetConfig+0x3fa>
 800496a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	025b      	lsls	r3, r3, #9
 8004970:	429a      	cmp	r2, r3
 8004972:	d21c      	bcs.n	80049ae <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	b29a      	uxth	r2, r3
 8004978:	200e      	movs	r0, #14
 800497a:	2420      	movs	r4, #32
 800497c:	1903      	adds	r3, r0, r4
 800497e:	19db      	adds	r3, r3, r7
 8004980:	210f      	movs	r1, #15
 8004982:	438a      	bics	r2, r1
 8004984:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	2207      	movs	r2, #7
 800498e:	4013      	ands	r3, r2
 8004990:	b299      	uxth	r1, r3
 8004992:	1903      	adds	r3, r0, r4
 8004994:	19db      	adds	r3, r3, r7
 8004996:	1902      	adds	r2, r0, r4
 8004998:	19d2      	adds	r2, r2, r7
 800499a:	8812      	ldrh	r2, [r2, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1902      	adds	r2, r0, r4
 80049a6:	19d2      	adds	r2, r2, r7
 80049a8:	8812      	ldrh	r2, [r2, #0]
 80049aa:	60da      	str	r2, [r3, #12]
 80049ac:	e05e      	b.n	8004a6c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80049ae:	231a      	movs	r3, #26
 80049b0:	2220      	movs	r2, #32
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	19db      	adds	r3, r3, r7
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e057      	b.n	8004a6c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049bc:	231b      	movs	r3, #27
 80049be:	2220      	movs	r2, #32
 80049c0:	189b      	adds	r3, r3, r2
 80049c2:	19db      	adds	r3, r3, r7
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d015      	beq.n	80049f6 <UART_SetConfig+0x442>
 80049ca:	dc18      	bgt.n	80049fe <UART_SetConfig+0x44a>
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d00d      	beq.n	80049ec <UART_SetConfig+0x438>
 80049d0:	dc15      	bgt.n	80049fe <UART_SetConfig+0x44a>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <UART_SetConfig+0x428>
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d005      	beq.n	80049e6 <UART_SetConfig+0x432>
 80049da:	e010      	b.n	80049fe <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fe fbc2 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 80049e0:	0003      	movs	r3, r0
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049e4:	e014      	b.n	8004a10 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e6:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa0 <UART_SetConfig+0x4ec>)
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049ea:	e011      	b.n	8004a10 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ec:	f7fe fb2e 	bl	800304c <HAL_RCC_GetSysClockFreq>
 80049f0:	0003      	movs	r3, r0
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049f4:	e00c      	b.n	8004a10 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049fc:	e008      	b.n	8004a10 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004a02:	231a      	movs	r3, #26
 8004a04:	2220      	movs	r2, #32
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	19db      	adds	r3, r3, r7
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
        break;
 8004a0e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02a      	beq.n	8004a6c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a1a:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <UART_SetConfig+0x4e8>)
 8004a1c:	0052      	lsls	r2, r2, #1
 8004a1e:	5ad3      	ldrh	r3, [r2, r3]
 8004a20:	0019      	movs	r1, r3
 8004a22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004a24:	f7fb fb82 	bl	800012c <__udivsi3>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	18d2      	adds	r2, r2, r3
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0019      	movs	r1, r3
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	f7fb fb76 	bl	800012c <__udivsi3>
 8004a40:	0003      	movs	r3, r0
 8004a42:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	2b0f      	cmp	r3, #15
 8004a48:	d90a      	bls.n	8004a60 <UART_SetConfig+0x4ac>
 8004a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	025b      	lsls	r3, r3, #9
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d205      	bcs.n	8004a60 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	e005      	b.n	8004a6c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a60:	231a      	movs	r3, #26
 8004a62:	2220      	movs	r2, #32
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	19db      	adds	r3, r3, r7
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	226a      	movs	r2, #106	@ 0x6a
 8004a70:	2101      	movs	r1, #1
 8004a72:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	2268      	movs	r2, #104	@ 0x68
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	2200      	movs	r2, #0
 8004a80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	2200      	movs	r2, #0
 8004a86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a88:	231a      	movs	r3, #26
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	189b      	adds	r3, r3, r2
 8004a8e:	19db      	adds	r3, r3, r7
 8004a90:	781b      	ldrb	r3, [r3, #0]
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b010      	add	sp, #64	@ 0x40
 8004a98:	bdb0      	pop	{r4, r5, r7, pc}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	08005930 	.word	0x08005930
 8004aa0:	00f42400 	.word	0x00f42400

08004aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a4a      	ldr	r2, [pc, #296]	@ (8004be8 <UART_AdvFeatureConfig+0x144>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4a43      	ldr	r2, [pc, #268]	@ (8004bec <UART_AdvFeatureConfig+0x148>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	2202      	movs	r2, #2
 8004af6:	4013      	ands	r3, r2
 8004af8:	d00b      	beq.n	8004b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4a3b      	ldr	r2, [pc, #236]	@ (8004bf0 <UART_AdvFeatureConfig+0x14c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	2204      	movs	r2, #4
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4a34      	ldr	r2, [pc, #208]	@ (8004bf4 <UART_AdvFeatureConfig+0x150>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	0019      	movs	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	2210      	movs	r2, #16
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf8 <UART_AdvFeatureConfig+0x154>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	0019      	movs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4a25      	ldr	r2, [pc, #148]	@ (8004bfc <UART_AdvFeatureConfig+0x158>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	2240      	movs	r2, #64	@ 0x40
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	@ (8004c00 <UART_AdvFeatureConfig+0x15c>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	035b      	lsls	r3, r3, #13
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d10b      	bne.n	8004bbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a15      	ldr	r2, [pc, #84]	@ (8004c04 <UART_AdvFeatureConfig+0x160>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	2280      	movs	r2, #128	@ 0x80
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4a0e      	ldr	r2, [pc, #56]	@ (8004c08 <UART_AdvFeatureConfig+0x164>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]
  }
}
 8004be0:	46c0      	nop			@ (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b002      	add	sp, #8
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	ffff7fff 	.word	0xffff7fff
 8004bec:	fffdffff 	.word	0xfffdffff
 8004bf0:	fffeffff 	.word	0xfffeffff
 8004bf4:	fffbffff 	.word	0xfffbffff
 8004bf8:	ffffefff 	.word	0xffffefff
 8004bfc:	ffffdfff 	.word	0xffffdfff
 8004c00:	ffefffff 	.word	0xffefffff
 8004c04:	ff9fffff 	.word	0xff9fffff
 8004c08:	fff7ffff 	.word	0xfff7ffff

08004c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b092      	sub	sp, #72	@ 0x48
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2290      	movs	r2, #144	@ 0x90
 8004c18:	2100      	movs	r1, #0
 8004c1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c1c:	f7fc fa3e 	bl	800109c <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d12d      	bne.n	8004c8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c34:	2280      	movs	r2, #128	@ 0x80
 8004c36:	0391      	lsls	r1, r2, #14
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4a47      	ldr	r2, [pc, #284]	@ (8004d58 <UART_CheckIdleState+0x14c>)
 8004c3c:	9200      	str	r2, [sp, #0]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f000 f88e 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8004c44:	1e03      	subs	r3, r0, #0
 8004c46:	d022      	beq.n	8004c8e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c48:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c52:	2301      	movs	r3, #1
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f383 8810 	msr	PRIMASK, r3
}
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2180      	movs	r1, #128	@ 0x80
 8004c6a:	438a      	bics	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2288      	movs	r2, #136	@ 0x88
 8004c7e:	2120      	movs	r1, #32
 8004c80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2284      	movs	r2, #132	@ 0x84
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e060      	b.n	8004d50 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2204      	movs	r2, #4
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d146      	bne.n	8004d2a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9e:	2280      	movs	r2, #128	@ 0x80
 8004ca0:	03d1      	lsls	r1, r2, #15
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d58 <UART_CheckIdleState+0x14c>)
 8004ca6:	9200      	str	r2, [sp, #0]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f000 f859 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8004cae:	1e03      	subs	r3, r0, #0
 8004cb0:	d03b      	beq.n	8004d2a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f383 8810 	msr	PRIMASK, r3
}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4922      	ldr	r1, [pc, #136]	@ (8004d5c <UART_CheckIdleState+0x150>)
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f383 8810 	msr	PRIMASK, r3
}
 8004ce2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	438a      	bics	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	228c      	movs	r2, #140	@ 0x8c
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2284      	movs	r2, #132	@ 0x84
 8004d22:	2100      	movs	r1, #0
 8004d24:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e012      	b.n	8004d50 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2288      	movs	r2, #136	@ 0x88
 8004d2e:	2120      	movs	r1, #32
 8004d30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	228c      	movs	r2, #140	@ 0x8c
 8004d36:	2120      	movs	r1, #32
 8004d38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2284      	movs	r2, #132	@ 0x84
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b010      	add	sp, #64	@ 0x40
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	01ffffff 	.word	0x01ffffff
 8004d5c:	fffffedf 	.word	0xfffffedf

08004d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	1dfb      	adds	r3, r7, #7
 8004d6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	e051      	b.n	8004e16 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3301      	adds	r3, #1
 8004d76:	d04e      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d78:	f7fc f990 	bl	800109c <HAL_GetTick>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e051      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d03b      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b80      	cmp	r3, #128	@ 0x80
 8004da2:	d038      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b40      	cmp	r3, #64	@ 0x40
 8004da8:	d035      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	2208      	movs	r2, #8
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d111      	bne.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f83c 	bl	8004e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2290      	movs	r2, #144	@ 0x90
 8004dcc:	2108      	movs	r1, #8
 8004dce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2284      	movs	r2, #132	@ 0x84
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e02c      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	401a      	ands	r2, r3
 8004de8:	2380      	movs	r3, #128	@ 0x80
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d112      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2280      	movs	r2, #128	@ 0x80
 8004df6:	0112      	lsls	r2, r2, #4
 8004df8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 f81f 	bl	8004e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2290      	movs	r2, #144	@ 0x90
 8004e06:	2120      	movs	r1, #32
 8004e08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2284      	movs	r2, #132	@ 0x84
 8004e0e:	2100      	movs	r1, #0
 8004e10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e00f      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	425a      	negs	r2, r3
 8004e26:	4153      	adcs	r3, r2
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	1dfb      	adds	r3, r7, #7
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d09e      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	@ 0x38
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e48:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e52:	2301      	movs	r3, #1
 8004e54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f383 8810 	msr	PRIMASK, r3
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4926      	ldr	r1, [pc, #152]	@ (8004f04 <UART_EndRxTransfer+0xc4>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f383 8810 	msr	PRIMASK, r3
}
 8004e78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7e:	623b      	str	r3, [r7, #32]
  return(result);
 8004e80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e84:	2301      	movs	r3, #1
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	f383 8810 	msr	PRIMASK, r3
}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	491b      	ldr	r1, [pc, #108]	@ (8004f08 <UART_EndRxTransfer+0xc8>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	f383 8810 	msr	PRIMASK, r3
}
 8004eaa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d118      	bne.n	8004ee6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	46c0      	nop			@ (mov r8, r8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2110      	movs	r1, #16
 8004ed6:	438a      	bics	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f383 8810 	msr	PRIMASK, r3
}
 8004ee4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	228c      	movs	r2, #140	@ 0x8c
 8004eea:	2120      	movs	r1, #32
 8004eec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b00e      	add	sp, #56	@ 0x38
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	46c0      	nop			@ (mov r8, r8)
 8004f04:	fffffedf 	.word	0xfffffedf
 8004f08:	effffffe 	.word	0xeffffffe

08004f0c <siprintf>:
 8004f0c:	b40e      	push	{r1, r2, r3}
 8004f0e:	b500      	push	{lr}
 8004f10:	490b      	ldr	r1, [pc, #44]	@ (8004f40 <siprintf+0x34>)
 8004f12:	b09c      	sub	sp, #112	@ 0x70
 8004f14:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f16:	9002      	str	r0, [sp, #8]
 8004f18:	9006      	str	r0, [sp, #24]
 8004f1a:	9107      	str	r1, [sp, #28]
 8004f1c:	9104      	str	r1, [sp, #16]
 8004f1e:	4809      	ldr	r0, [pc, #36]	@ (8004f44 <siprintf+0x38>)
 8004f20:	4909      	ldr	r1, [pc, #36]	@ (8004f48 <siprintf+0x3c>)
 8004f22:	cb04      	ldmia	r3!, {r2}
 8004f24:	9105      	str	r1, [sp, #20]
 8004f26:	6800      	ldr	r0, [r0, #0]
 8004f28:	a902      	add	r1, sp, #8
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	f000 f99e 	bl	800526c <_svfiprintf_r>
 8004f30:	2200      	movs	r2, #0
 8004f32:	9b02      	ldr	r3, [sp, #8]
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	b01c      	add	sp, #112	@ 0x70
 8004f38:	bc08      	pop	{r3}
 8004f3a:	b003      	add	sp, #12
 8004f3c:	4718      	bx	r3
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	7fffffff 	.word	0x7fffffff
 8004f44:	2000000c 	.word	0x2000000c
 8004f48:	ffff0208 	.word	0xffff0208

08004f4c <memset>:
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	1882      	adds	r2, r0, r2
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	7019      	strb	r1, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <__errno>:
 8004f5c:	4b01      	ldr	r3, [pc, #4]	@ (8004f64 <__errno+0x8>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	4770      	bx	lr
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	2000000c 	.word	0x2000000c

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa0 <__libc_init_array+0x38>)
 8004f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004fa4 <__libc_init_array+0x3c>)
 8004f70:	1b64      	subs	r4, r4, r5
 8004f72:	10a4      	asrs	r4, r4, #2
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	2600      	movs	r6, #0
 8004f7a:	f000 fc65 	bl	8005848 <_init>
 8004f7e:	4c0a      	ldr	r4, [pc, #40]	@ (8004fa8 <__libc_init_array+0x40>)
 8004f80:	4d0a      	ldr	r5, [pc, #40]	@ (8004fac <__libc_init_array+0x44>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	00b3      	lsls	r3, r6, #2
 8004f8e:	58eb      	ldr	r3, [r5, r3]
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	00b3      	lsls	r3, r6, #2
 8004f98:	58eb      	ldr	r3, [r5, r3]
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	08005984 	.word	0x08005984
 8004fa4:	08005984 	.word	0x08005984
 8004fa8:	08005988 	.word	0x08005988
 8004fac:	08005984 	.word	0x08005984

08004fb0 <__retarget_lock_acquire_recursive>:
 8004fb0:	4770      	bx	lr

08004fb2 <__retarget_lock_release_recursive>:
 8004fb2:	4770      	bx	lr

08004fb4 <_free_r>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	0005      	movs	r5, r0
 8004fb8:	1e0c      	subs	r4, r1, #0
 8004fba:	d010      	beq.n	8004fde <_free_r+0x2a>
 8004fbc:	3c04      	subs	r4, #4
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	da00      	bge.n	8004fc6 <_free_r+0x12>
 8004fc4:	18e4      	adds	r4, r4, r3
 8004fc6:	0028      	movs	r0, r5
 8004fc8:	f000 f8e0 	bl	800518c <__malloc_lock>
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <_free_r+0x90>)
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <_free_r+0x2c>
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	6014      	str	r4, [r2, #0]
 8004fd8:	0028      	movs	r0, r5
 8004fda:	f000 f8df 	bl	800519c <__malloc_unlock>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d908      	bls.n	8004ff6 <_free_r+0x42>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	1821      	adds	r1, r4, r0
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	d1f3      	bne.n	8004fd4 <_free_r+0x20>
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	1809      	adds	r1, r1, r0
 8004ff2:	6021      	str	r1, [r4, #0]
 8004ff4:	e7ee      	b.n	8004fd4 <_free_r+0x20>
 8004ff6:	001a      	movs	r2, r3
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <_free_r+0x4e>
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	d9f9      	bls.n	8004ff6 <_free_r+0x42>
 8005002:	6811      	ldr	r1, [r2, #0]
 8005004:	1850      	adds	r0, r2, r1
 8005006:	42a0      	cmp	r0, r4
 8005008:	d10b      	bne.n	8005022 <_free_r+0x6e>
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	1809      	adds	r1, r1, r0
 800500e:	1850      	adds	r0, r2, r1
 8005010:	6011      	str	r1, [r2, #0]
 8005012:	4283      	cmp	r3, r0
 8005014:	d1e0      	bne.n	8004fd8 <_free_r+0x24>
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	1841      	adds	r1, r0, r1
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	6053      	str	r3, [r2, #4]
 8005020:	e7da      	b.n	8004fd8 <_free_r+0x24>
 8005022:	42a0      	cmp	r0, r4
 8005024:	d902      	bls.n	800502c <_free_r+0x78>
 8005026:	230c      	movs	r3, #12
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	e7d5      	b.n	8004fd8 <_free_r+0x24>
 800502c:	6820      	ldr	r0, [r4, #0]
 800502e:	1821      	adds	r1, r4, r0
 8005030:	428b      	cmp	r3, r1
 8005032:	d103      	bne.n	800503c <_free_r+0x88>
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	1809      	adds	r1, r1, r0
 800503a:	6021      	str	r1, [r4, #0]
 800503c:	6063      	str	r3, [r4, #4]
 800503e:	6054      	str	r4, [r2, #4]
 8005040:	e7ca      	b.n	8004fd8 <_free_r+0x24>
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	200003c0 	.word	0x200003c0

08005048 <sbrk_aligned>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4e0f      	ldr	r6, [pc, #60]	@ (8005088 <sbrk_aligned+0x40>)
 800504c:	000d      	movs	r5, r1
 800504e:	6831      	ldr	r1, [r6, #0]
 8005050:	0004      	movs	r4, r0
 8005052:	2900      	cmp	r1, #0
 8005054:	d102      	bne.n	800505c <sbrk_aligned+0x14>
 8005056:	f000 fb99 	bl	800578c <_sbrk_r>
 800505a:	6030      	str	r0, [r6, #0]
 800505c:	0029      	movs	r1, r5
 800505e:	0020      	movs	r0, r4
 8005060:	f000 fb94 	bl	800578c <_sbrk_r>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d103      	bne.n	8005070 <sbrk_aligned+0x28>
 8005068:	2501      	movs	r5, #1
 800506a:	426d      	negs	r5, r5
 800506c:	0028      	movs	r0, r5
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	2303      	movs	r3, #3
 8005072:	1cc5      	adds	r5, r0, #3
 8005074:	439d      	bics	r5, r3
 8005076:	42a8      	cmp	r0, r5
 8005078:	d0f8      	beq.n	800506c <sbrk_aligned+0x24>
 800507a:	1a29      	subs	r1, r5, r0
 800507c:	0020      	movs	r0, r4
 800507e:	f000 fb85 	bl	800578c <_sbrk_r>
 8005082:	3001      	adds	r0, #1
 8005084:	d1f2      	bne.n	800506c <sbrk_aligned+0x24>
 8005086:	e7ef      	b.n	8005068 <sbrk_aligned+0x20>
 8005088:	200003bc 	.word	0x200003bc

0800508c <_malloc_r>:
 800508c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800508e:	2203      	movs	r2, #3
 8005090:	1ccb      	adds	r3, r1, #3
 8005092:	4393      	bics	r3, r2
 8005094:	3308      	adds	r3, #8
 8005096:	0005      	movs	r5, r0
 8005098:	001f      	movs	r7, r3
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d234      	bcs.n	8005108 <_malloc_r+0x7c>
 800509e:	270c      	movs	r7, #12
 80050a0:	42b9      	cmp	r1, r7
 80050a2:	d833      	bhi.n	800510c <_malloc_r+0x80>
 80050a4:	0028      	movs	r0, r5
 80050a6:	f000 f871 	bl	800518c <__malloc_lock>
 80050aa:	4e37      	ldr	r6, [pc, #220]	@ (8005188 <_malloc_r+0xfc>)
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	001c      	movs	r4, r3
 80050b0:	2c00      	cmp	r4, #0
 80050b2:	d12f      	bne.n	8005114 <_malloc_r+0x88>
 80050b4:	0039      	movs	r1, r7
 80050b6:	0028      	movs	r0, r5
 80050b8:	f7ff ffc6 	bl	8005048 <sbrk_aligned>
 80050bc:	0004      	movs	r4, r0
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	d15f      	bne.n	8005182 <_malloc_r+0xf6>
 80050c2:	6834      	ldr	r4, [r6, #0]
 80050c4:	9400      	str	r4, [sp, #0]
 80050c6:	9b00      	ldr	r3, [sp, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d14a      	bne.n	8005162 <_malloc_r+0xd6>
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	d052      	beq.n	8005176 <_malloc_r+0xea>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	0028      	movs	r0, r5
 80050d4:	18e3      	adds	r3, r4, r3
 80050d6:	9900      	ldr	r1, [sp, #0]
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	f000 fb57 	bl	800578c <_sbrk_r>
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	4283      	cmp	r3, r0
 80050e2:	d148      	bne.n	8005176 <_malloc_r+0xea>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	0028      	movs	r0, r5
 80050e8:	1aff      	subs	r7, r7, r3
 80050ea:	0039      	movs	r1, r7
 80050ec:	f7ff ffac 	bl	8005048 <sbrk_aligned>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d040      	beq.n	8005176 <_malloc_r+0xea>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	19db      	adds	r3, r3, r7
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	6833      	ldr	r3, [r6, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	2a00      	cmp	r2, #0
 8005100:	d133      	bne.n	800516a <_malloc_r+0xde>
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	6033      	str	r3, [r6, #0]
 8005106:	e019      	b.n	800513c <_malloc_r+0xb0>
 8005108:	2b00      	cmp	r3, #0
 800510a:	dac9      	bge.n	80050a0 <_malloc_r+0x14>
 800510c:	230c      	movs	r3, #12
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	2000      	movs	r0, #0
 8005112:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005114:	6821      	ldr	r1, [r4, #0]
 8005116:	1bc9      	subs	r1, r1, r7
 8005118:	d420      	bmi.n	800515c <_malloc_r+0xd0>
 800511a:	290b      	cmp	r1, #11
 800511c:	d90a      	bls.n	8005134 <_malloc_r+0xa8>
 800511e:	19e2      	adds	r2, r4, r7
 8005120:	6027      	str	r7, [r4, #0]
 8005122:	42a3      	cmp	r3, r4
 8005124:	d104      	bne.n	8005130 <_malloc_r+0xa4>
 8005126:	6032      	str	r2, [r6, #0]
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	6011      	str	r1, [r2, #0]
 800512c:	6053      	str	r3, [r2, #4]
 800512e:	e005      	b.n	800513c <_malloc_r+0xb0>
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	e7f9      	b.n	8005128 <_malloc_r+0x9c>
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	42a3      	cmp	r3, r4
 8005138:	d10e      	bne.n	8005158 <_malloc_r+0xcc>
 800513a:	6032      	str	r2, [r6, #0]
 800513c:	0028      	movs	r0, r5
 800513e:	f000 f82d 	bl	800519c <__malloc_unlock>
 8005142:	0020      	movs	r0, r4
 8005144:	2207      	movs	r2, #7
 8005146:	300b      	adds	r0, #11
 8005148:	1d23      	adds	r3, r4, #4
 800514a:	4390      	bics	r0, r2
 800514c:	1ac2      	subs	r2, r0, r3
 800514e:	4298      	cmp	r0, r3
 8005150:	d0df      	beq.n	8005112 <_malloc_r+0x86>
 8005152:	1a1b      	subs	r3, r3, r0
 8005154:	50a3      	str	r3, [r4, r2]
 8005156:	e7dc      	b.n	8005112 <_malloc_r+0x86>
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	e7ef      	b.n	800513c <_malloc_r+0xb0>
 800515c:	0023      	movs	r3, r4
 800515e:	6864      	ldr	r4, [r4, #4]
 8005160:	e7a6      	b.n	80050b0 <_malloc_r+0x24>
 8005162:	9c00      	ldr	r4, [sp, #0]
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	e7ad      	b.n	80050c6 <_malloc_r+0x3a>
 800516a:	001a      	movs	r2, r3
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	42a3      	cmp	r3, r4
 8005170:	d1fb      	bne.n	800516a <_malloc_r+0xde>
 8005172:	2300      	movs	r3, #0
 8005174:	e7da      	b.n	800512c <_malloc_r+0xa0>
 8005176:	230c      	movs	r3, #12
 8005178:	0028      	movs	r0, r5
 800517a:	602b      	str	r3, [r5, #0]
 800517c:	f000 f80e 	bl	800519c <__malloc_unlock>
 8005180:	e7c6      	b.n	8005110 <_malloc_r+0x84>
 8005182:	6007      	str	r7, [r0, #0]
 8005184:	e7da      	b.n	800513c <_malloc_r+0xb0>
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	200003c0 	.word	0x200003c0

0800518c <__malloc_lock>:
 800518c:	b510      	push	{r4, lr}
 800518e:	4802      	ldr	r0, [pc, #8]	@ (8005198 <__malloc_lock+0xc>)
 8005190:	f7ff ff0e 	bl	8004fb0 <__retarget_lock_acquire_recursive>
 8005194:	bd10      	pop	{r4, pc}
 8005196:	46c0      	nop			@ (mov r8, r8)
 8005198:	200003b8 	.word	0x200003b8

0800519c <__malloc_unlock>:
 800519c:	b510      	push	{r4, lr}
 800519e:	4802      	ldr	r0, [pc, #8]	@ (80051a8 <__malloc_unlock+0xc>)
 80051a0:	f7ff ff07 	bl	8004fb2 <__retarget_lock_release_recursive>
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	46c0      	nop			@ (mov r8, r8)
 80051a8:	200003b8 	.word	0x200003b8

080051ac <__ssputs_r>:
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	688e      	ldr	r6, [r1, #8]
 80051b0:	b085      	sub	sp, #20
 80051b2:	001f      	movs	r7, r3
 80051b4:	000c      	movs	r4, r1
 80051b6:	680b      	ldr	r3, [r1, #0]
 80051b8:	9002      	str	r0, [sp, #8]
 80051ba:	9203      	str	r2, [sp, #12]
 80051bc:	42be      	cmp	r6, r7
 80051be:	d830      	bhi.n	8005222 <__ssputs_r+0x76>
 80051c0:	210c      	movs	r1, #12
 80051c2:	5e62      	ldrsh	r2, [r4, r1]
 80051c4:	2190      	movs	r1, #144	@ 0x90
 80051c6:	00c9      	lsls	r1, r1, #3
 80051c8:	420a      	tst	r2, r1
 80051ca:	d028      	beq.n	800521e <__ssputs_r+0x72>
 80051cc:	2003      	movs	r0, #3
 80051ce:	6921      	ldr	r1, [r4, #16]
 80051d0:	1a5b      	subs	r3, r3, r1
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	6963      	ldr	r3, [r4, #20]
 80051d6:	4343      	muls	r3, r0
 80051d8:	9801      	ldr	r0, [sp, #4]
 80051da:	0fdd      	lsrs	r5, r3, #31
 80051dc:	18ed      	adds	r5, r5, r3
 80051de:	1c7b      	adds	r3, r7, #1
 80051e0:	181b      	adds	r3, r3, r0
 80051e2:	106d      	asrs	r5, r5, #1
 80051e4:	42ab      	cmp	r3, r5
 80051e6:	d900      	bls.n	80051ea <__ssputs_r+0x3e>
 80051e8:	001d      	movs	r5, r3
 80051ea:	0552      	lsls	r2, r2, #21
 80051ec:	d528      	bpl.n	8005240 <__ssputs_r+0x94>
 80051ee:	0029      	movs	r1, r5
 80051f0:	9802      	ldr	r0, [sp, #8]
 80051f2:	f7ff ff4b 	bl	800508c <_malloc_r>
 80051f6:	1e06      	subs	r6, r0, #0
 80051f8:	d02c      	beq.n	8005254 <__ssputs_r+0xa8>
 80051fa:	9a01      	ldr	r2, [sp, #4]
 80051fc:	6921      	ldr	r1, [r4, #16]
 80051fe:	f000 fae2 	bl	80057c6 <memcpy>
 8005202:	89a2      	ldrh	r2, [r4, #12]
 8005204:	4b18      	ldr	r3, [pc, #96]	@ (8005268 <__ssputs_r+0xbc>)
 8005206:	401a      	ands	r2, r3
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	4313      	orrs	r3, r2
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	9b01      	ldr	r3, [sp, #4]
 8005210:	6126      	str	r6, [r4, #16]
 8005212:	18f6      	adds	r6, r6, r3
 8005214:	6026      	str	r6, [r4, #0]
 8005216:	003e      	movs	r6, r7
 8005218:	6165      	str	r5, [r4, #20]
 800521a:	1aed      	subs	r5, r5, r3
 800521c:	60a5      	str	r5, [r4, #8]
 800521e:	42be      	cmp	r6, r7
 8005220:	d900      	bls.n	8005224 <__ssputs_r+0x78>
 8005222:	003e      	movs	r6, r7
 8005224:	0032      	movs	r2, r6
 8005226:	9903      	ldr	r1, [sp, #12]
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	f000 fa9b 	bl	8005764 <memmove>
 800522e:	2000      	movs	r0, #0
 8005230:	68a3      	ldr	r3, [r4, #8]
 8005232:	1b9b      	subs	r3, r3, r6
 8005234:	60a3      	str	r3, [r4, #8]
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	199b      	adds	r3, r3, r6
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	b005      	add	sp, #20
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005240:	002a      	movs	r2, r5
 8005242:	9802      	ldr	r0, [sp, #8]
 8005244:	f000 fac8 	bl	80057d8 <_realloc_r>
 8005248:	1e06      	subs	r6, r0, #0
 800524a:	d1e0      	bne.n	800520e <__ssputs_r+0x62>
 800524c:	6921      	ldr	r1, [r4, #16]
 800524e:	9802      	ldr	r0, [sp, #8]
 8005250:	f7ff feb0 	bl	8004fb4 <_free_r>
 8005254:	230c      	movs	r3, #12
 8005256:	2001      	movs	r0, #1
 8005258:	9a02      	ldr	r2, [sp, #8]
 800525a:	4240      	negs	r0, r0
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	89a2      	ldrh	r2, [r4, #12]
 8005260:	3334      	adds	r3, #52	@ 0x34
 8005262:	4313      	orrs	r3, r2
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	e7e9      	b.n	800523c <__ssputs_r+0x90>
 8005268:	fffffb7f 	.word	0xfffffb7f

0800526c <_svfiprintf_r>:
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526e:	b0a1      	sub	sp, #132	@ 0x84
 8005270:	9003      	str	r0, [sp, #12]
 8005272:	001d      	movs	r5, r3
 8005274:	898b      	ldrh	r3, [r1, #12]
 8005276:	000f      	movs	r7, r1
 8005278:	0016      	movs	r6, r2
 800527a:	061b      	lsls	r3, r3, #24
 800527c:	d511      	bpl.n	80052a2 <_svfiprintf_r+0x36>
 800527e:	690b      	ldr	r3, [r1, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10e      	bne.n	80052a2 <_svfiprintf_r+0x36>
 8005284:	2140      	movs	r1, #64	@ 0x40
 8005286:	f7ff ff01 	bl	800508c <_malloc_r>
 800528a:	6038      	str	r0, [r7, #0]
 800528c:	6138      	str	r0, [r7, #16]
 800528e:	2800      	cmp	r0, #0
 8005290:	d105      	bne.n	800529e <_svfiprintf_r+0x32>
 8005292:	230c      	movs	r3, #12
 8005294:	9a03      	ldr	r2, [sp, #12]
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	2001      	movs	r0, #1
 800529a:	4240      	negs	r0, r0
 800529c:	e0cf      	b.n	800543e <_svfiprintf_r+0x1d2>
 800529e:	2340      	movs	r3, #64	@ 0x40
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	2300      	movs	r3, #0
 80052a4:	ac08      	add	r4, sp, #32
 80052a6:	6163      	str	r3, [r4, #20]
 80052a8:	3320      	adds	r3, #32
 80052aa:	7663      	strb	r3, [r4, #25]
 80052ac:	3310      	adds	r3, #16
 80052ae:	76a3      	strb	r3, [r4, #26]
 80052b0:	9507      	str	r5, [sp, #28]
 80052b2:	0035      	movs	r5, r6
 80052b4:	782b      	ldrb	r3, [r5, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <_svfiprintf_r+0x52>
 80052ba:	2b25      	cmp	r3, #37	@ 0x25
 80052bc:	d148      	bne.n	8005350 <_svfiprintf_r+0xe4>
 80052be:	1bab      	subs	r3, r5, r6
 80052c0:	9305      	str	r3, [sp, #20]
 80052c2:	42b5      	cmp	r5, r6
 80052c4:	d00b      	beq.n	80052de <_svfiprintf_r+0x72>
 80052c6:	0032      	movs	r2, r6
 80052c8:	0039      	movs	r1, r7
 80052ca:	9803      	ldr	r0, [sp, #12]
 80052cc:	f7ff ff6e 	bl	80051ac <__ssputs_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d100      	bne.n	80052d6 <_svfiprintf_r+0x6a>
 80052d4:	e0ae      	b.n	8005434 <_svfiprintf_r+0x1c8>
 80052d6:	6963      	ldr	r3, [r4, #20]
 80052d8:	9a05      	ldr	r2, [sp, #20]
 80052da:	189b      	adds	r3, r3, r2
 80052dc:	6163      	str	r3, [r4, #20]
 80052de:	782b      	ldrb	r3, [r5, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d100      	bne.n	80052e6 <_svfiprintf_r+0x7a>
 80052e4:	e0a6      	b.n	8005434 <_svfiprintf_r+0x1c8>
 80052e6:	2201      	movs	r2, #1
 80052e8:	2300      	movs	r3, #0
 80052ea:	4252      	negs	r2, r2
 80052ec:	6062      	str	r2, [r4, #4]
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	3254      	adds	r2, #84	@ 0x54
 80052f2:	1852      	adds	r2, r2, r1
 80052f4:	1c6e      	adds	r6, r5, #1
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	60e3      	str	r3, [r4, #12]
 80052fa:	60a3      	str	r3, [r4, #8]
 80052fc:	7013      	strb	r3, [r2, #0]
 80052fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005300:	4b54      	ldr	r3, [pc, #336]	@ (8005454 <_svfiprintf_r+0x1e8>)
 8005302:	2205      	movs	r2, #5
 8005304:	0018      	movs	r0, r3
 8005306:	7831      	ldrb	r1, [r6, #0]
 8005308:	9305      	str	r3, [sp, #20]
 800530a:	f000 fa51 	bl	80057b0 <memchr>
 800530e:	1c75      	adds	r5, r6, #1
 8005310:	2800      	cmp	r0, #0
 8005312:	d11f      	bne.n	8005354 <_svfiprintf_r+0xe8>
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	06d3      	lsls	r3, r2, #27
 8005318:	d504      	bpl.n	8005324 <_svfiprintf_r+0xb8>
 800531a:	2353      	movs	r3, #83	@ 0x53
 800531c:	a904      	add	r1, sp, #16
 800531e:	185b      	adds	r3, r3, r1
 8005320:	2120      	movs	r1, #32
 8005322:	7019      	strb	r1, [r3, #0]
 8005324:	0713      	lsls	r3, r2, #28
 8005326:	d504      	bpl.n	8005332 <_svfiprintf_r+0xc6>
 8005328:	2353      	movs	r3, #83	@ 0x53
 800532a:	a904      	add	r1, sp, #16
 800532c:	185b      	adds	r3, r3, r1
 800532e:	212b      	movs	r1, #43	@ 0x2b
 8005330:	7019      	strb	r1, [r3, #0]
 8005332:	7833      	ldrb	r3, [r6, #0]
 8005334:	2b2a      	cmp	r3, #42	@ 0x2a
 8005336:	d016      	beq.n	8005366 <_svfiprintf_r+0xfa>
 8005338:	0035      	movs	r5, r6
 800533a:	2100      	movs	r1, #0
 800533c:	200a      	movs	r0, #10
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	782a      	ldrb	r2, [r5, #0]
 8005342:	1c6e      	adds	r6, r5, #1
 8005344:	3a30      	subs	r2, #48	@ 0x30
 8005346:	2a09      	cmp	r2, #9
 8005348:	d950      	bls.n	80053ec <_svfiprintf_r+0x180>
 800534a:	2900      	cmp	r1, #0
 800534c:	d111      	bne.n	8005372 <_svfiprintf_r+0x106>
 800534e:	e017      	b.n	8005380 <_svfiprintf_r+0x114>
 8005350:	3501      	adds	r5, #1
 8005352:	e7af      	b.n	80052b4 <_svfiprintf_r+0x48>
 8005354:	9b05      	ldr	r3, [sp, #20]
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	1ac0      	subs	r0, r0, r3
 800535a:	2301      	movs	r3, #1
 800535c:	4083      	lsls	r3, r0
 800535e:	4313      	orrs	r3, r2
 8005360:	002e      	movs	r6, r5
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	e7cc      	b.n	8005300 <_svfiprintf_r+0x94>
 8005366:	9b07      	ldr	r3, [sp, #28]
 8005368:	1d19      	adds	r1, r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	9107      	str	r1, [sp, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	db01      	blt.n	8005376 <_svfiprintf_r+0x10a>
 8005372:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005374:	e004      	b.n	8005380 <_svfiprintf_r+0x114>
 8005376:	425b      	negs	r3, r3
 8005378:	60e3      	str	r3, [r4, #12]
 800537a:	2302      	movs	r3, #2
 800537c:	4313      	orrs	r3, r2
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	782b      	ldrb	r3, [r5, #0]
 8005382:	2b2e      	cmp	r3, #46	@ 0x2e
 8005384:	d10c      	bne.n	80053a0 <_svfiprintf_r+0x134>
 8005386:	786b      	ldrb	r3, [r5, #1]
 8005388:	2b2a      	cmp	r3, #42	@ 0x2a
 800538a:	d134      	bne.n	80053f6 <_svfiprintf_r+0x18a>
 800538c:	9b07      	ldr	r3, [sp, #28]
 800538e:	3502      	adds	r5, #2
 8005390:	1d1a      	adds	r2, r3, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	9207      	str	r2, [sp, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	da01      	bge.n	800539e <_svfiprintf_r+0x132>
 800539a:	2301      	movs	r3, #1
 800539c:	425b      	negs	r3, r3
 800539e:	9309      	str	r3, [sp, #36]	@ 0x24
 80053a0:	4e2d      	ldr	r6, [pc, #180]	@ (8005458 <_svfiprintf_r+0x1ec>)
 80053a2:	2203      	movs	r2, #3
 80053a4:	0030      	movs	r0, r6
 80053a6:	7829      	ldrb	r1, [r5, #0]
 80053a8:	f000 fa02 	bl	80057b0 <memchr>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d006      	beq.n	80053be <_svfiprintf_r+0x152>
 80053b0:	2340      	movs	r3, #64	@ 0x40
 80053b2:	1b80      	subs	r0, r0, r6
 80053b4:	4083      	lsls	r3, r0
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	3501      	adds	r5, #1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	7829      	ldrb	r1, [r5, #0]
 80053c0:	2206      	movs	r2, #6
 80053c2:	4826      	ldr	r0, [pc, #152]	@ (800545c <_svfiprintf_r+0x1f0>)
 80053c4:	1c6e      	adds	r6, r5, #1
 80053c6:	7621      	strb	r1, [r4, #24]
 80053c8:	f000 f9f2 	bl	80057b0 <memchr>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d038      	beq.n	8005442 <_svfiprintf_r+0x1d6>
 80053d0:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <_svfiprintf_r+0x1f4>)
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d122      	bne.n	800541c <_svfiprintf_r+0x1b0>
 80053d6:	2207      	movs	r2, #7
 80053d8:	9b07      	ldr	r3, [sp, #28]
 80053da:	3307      	adds	r3, #7
 80053dc:	4393      	bics	r3, r2
 80053de:	3308      	adds	r3, #8
 80053e0:	9307      	str	r3, [sp, #28]
 80053e2:	6963      	ldr	r3, [r4, #20]
 80053e4:	9a04      	ldr	r2, [sp, #16]
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	6163      	str	r3, [r4, #20]
 80053ea:	e762      	b.n	80052b2 <_svfiprintf_r+0x46>
 80053ec:	4343      	muls	r3, r0
 80053ee:	0035      	movs	r5, r6
 80053f0:	2101      	movs	r1, #1
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	e7a4      	b.n	8005340 <_svfiprintf_r+0xd4>
 80053f6:	2300      	movs	r3, #0
 80053f8:	200a      	movs	r0, #10
 80053fa:	0019      	movs	r1, r3
 80053fc:	3501      	adds	r5, #1
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	782a      	ldrb	r2, [r5, #0]
 8005402:	1c6e      	adds	r6, r5, #1
 8005404:	3a30      	subs	r2, #48	@ 0x30
 8005406:	2a09      	cmp	r2, #9
 8005408:	d903      	bls.n	8005412 <_svfiprintf_r+0x1a6>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0c8      	beq.n	80053a0 <_svfiprintf_r+0x134>
 800540e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005410:	e7c6      	b.n	80053a0 <_svfiprintf_r+0x134>
 8005412:	4341      	muls	r1, r0
 8005414:	0035      	movs	r5, r6
 8005416:	2301      	movs	r3, #1
 8005418:	1889      	adds	r1, r1, r2
 800541a:	e7f1      	b.n	8005400 <_svfiprintf_r+0x194>
 800541c:	aa07      	add	r2, sp, #28
 800541e:	9200      	str	r2, [sp, #0]
 8005420:	0021      	movs	r1, r4
 8005422:	003a      	movs	r2, r7
 8005424:	4b0f      	ldr	r3, [pc, #60]	@ (8005464 <_svfiprintf_r+0x1f8>)
 8005426:	9803      	ldr	r0, [sp, #12]
 8005428:	e000      	b.n	800542c <_svfiprintf_r+0x1c0>
 800542a:	bf00      	nop
 800542c:	9004      	str	r0, [sp, #16]
 800542e:	9b04      	ldr	r3, [sp, #16]
 8005430:	3301      	adds	r3, #1
 8005432:	d1d6      	bne.n	80053e2 <_svfiprintf_r+0x176>
 8005434:	89bb      	ldrh	r3, [r7, #12]
 8005436:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005438:	065b      	lsls	r3, r3, #25
 800543a:	d500      	bpl.n	800543e <_svfiprintf_r+0x1d2>
 800543c:	e72c      	b.n	8005298 <_svfiprintf_r+0x2c>
 800543e:	b021      	add	sp, #132	@ 0x84
 8005440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005442:	aa07      	add	r2, sp, #28
 8005444:	9200      	str	r2, [sp, #0]
 8005446:	0021      	movs	r1, r4
 8005448:	003a      	movs	r2, r7
 800544a:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <_svfiprintf_r+0x1f8>)
 800544c:	9803      	ldr	r0, [sp, #12]
 800544e:	f000 f87b 	bl	8005548 <_printf_i>
 8005452:	e7eb      	b.n	800542c <_svfiprintf_r+0x1c0>
 8005454:	08005948 	.word	0x08005948
 8005458:	0800594e 	.word	0x0800594e
 800545c:	08005952 	.word	0x08005952
 8005460:	00000000 	.word	0x00000000
 8005464:	080051ad 	.word	0x080051ad

08005468 <_printf_common>:
 8005468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800546a:	0016      	movs	r6, r2
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	688a      	ldr	r2, [r1, #8]
 8005470:	690b      	ldr	r3, [r1, #16]
 8005472:	000c      	movs	r4, r1
 8005474:	9000      	str	r0, [sp, #0]
 8005476:	4293      	cmp	r3, r2
 8005478:	da00      	bge.n	800547c <_printf_common+0x14>
 800547a:	0013      	movs	r3, r2
 800547c:	0022      	movs	r2, r4
 800547e:	6033      	str	r3, [r6, #0]
 8005480:	3243      	adds	r2, #67	@ 0x43
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	2a00      	cmp	r2, #0
 8005486:	d001      	beq.n	800548c <_printf_common+0x24>
 8005488:	3301      	adds	r3, #1
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	069b      	lsls	r3, r3, #26
 8005490:	d502      	bpl.n	8005498 <_printf_common+0x30>
 8005492:	6833      	ldr	r3, [r6, #0]
 8005494:	3302      	adds	r3, #2
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	2306      	movs	r3, #6
 800549c:	0015      	movs	r5, r2
 800549e:	401d      	ands	r5, r3
 80054a0:	421a      	tst	r2, r3
 80054a2:	d027      	beq.n	80054f4 <_printf_common+0x8c>
 80054a4:	0023      	movs	r3, r4
 80054a6:	3343      	adds	r3, #67	@ 0x43
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	4193      	sbcs	r3, r2
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	0692      	lsls	r2, r2, #26
 80054b2:	d430      	bmi.n	8005516 <_printf_common+0xae>
 80054b4:	0022      	movs	r2, r4
 80054b6:	9901      	ldr	r1, [sp, #4]
 80054b8:	9800      	ldr	r0, [sp, #0]
 80054ba:	9d08      	ldr	r5, [sp, #32]
 80054bc:	3243      	adds	r2, #67	@ 0x43
 80054be:	47a8      	blx	r5
 80054c0:	3001      	adds	r0, #1
 80054c2:	d025      	beq.n	8005510 <_printf_common+0xa8>
 80054c4:	2206      	movs	r2, #6
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	2500      	movs	r5, #0
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d105      	bne.n	80054dc <_printf_common+0x74>
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	68e5      	ldr	r5, [r4, #12]
 80054d4:	1aed      	subs	r5, r5, r3
 80054d6:	43eb      	mvns	r3, r5
 80054d8:	17db      	asrs	r3, r3, #31
 80054da:	401d      	ands	r5, r3
 80054dc:	68a3      	ldr	r3, [r4, #8]
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	dd01      	ble.n	80054e8 <_printf_common+0x80>
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	18ed      	adds	r5, r5, r3
 80054e8:	2600      	movs	r6, #0
 80054ea:	42b5      	cmp	r5, r6
 80054ec:	d120      	bne.n	8005530 <_printf_common+0xc8>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e010      	b.n	8005514 <_printf_common+0xac>
 80054f2:	3501      	adds	r5, #1
 80054f4:	68e3      	ldr	r3, [r4, #12]
 80054f6:	6832      	ldr	r2, [r6, #0]
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	42ab      	cmp	r3, r5
 80054fc:	ddd2      	ble.n	80054a4 <_printf_common+0x3c>
 80054fe:	0022      	movs	r2, r4
 8005500:	2301      	movs	r3, #1
 8005502:	9901      	ldr	r1, [sp, #4]
 8005504:	9800      	ldr	r0, [sp, #0]
 8005506:	9f08      	ldr	r7, [sp, #32]
 8005508:	3219      	adds	r2, #25
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	d1f0      	bne.n	80054f2 <_printf_common+0x8a>
 8005510:	2001      	movs	r0, #1
 8005512:	4240      	negs	r0, r0
 8005514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005516:	2030      	movs	r0, #48	@ 0x30
 8005518:	18e1      	adds	r1, r4, r3
 800551a:	3143      	adds	r1, #67	@ 0x43
 800551c:	7008      	strb	r0, [r1, #0]
 800551e:	0021      	movs	r1, r4
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	3145      	adds	r1, #69	@ 0x45
 8005524:	7809      	ldrb	r1, [r1, #0]
 8005526:	18a2      	adds	r2, r4, r2
 8005528:	3243      	adds	r2, #67	@ 0x43
 800552a:	3302      	adds	r3, #2
 800552c:	7011      	strb	r1, [r2, #0]
 800552e:	e7c1      	b.n	80054b4 <_printf_common+0x4c>
 8005530:	0022      	movs	r2, r4
 8005532:	2301      	movs	r3, #1
 8005534:	9901      	ldr	r1, [sp, #4]
 8005536:	9800      	ldr	r0, [sp, #0]
 8005538:	9f08      	ldr	r7, [sp, #32]
 800553a:	321a      	adds	r2, #26
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	d0e6      	beq.n	8005510 <_printf_common+0xa8>
 8005542:	3601      	adds	r6, #1
 8005544:	e7d1      	b.n	80054ea <_printf_common+0x82>
	...

08005548 <_printf_i>:
 8005548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554a:	b08b      	sub	sp, #44	@ 0x2c
 800554c:	9206      	str	r2, [sp, #24]
 800554e:	000a      	movs	r2, r1
 8005550:	3243      	adds	r2, #67	@ 0x43
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	9005      	str	r0, [sp, #20]
 8005556:	9203      	str	r2, [sp, #12]
 8005558:	7e0a      	ldrb	r2, [r1, #24]
 800555a:	000c      	movs	r4, r1
 800555c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800555e:	2a78      	cmp	r2, #120	@ 0x78
 8005560:	d809      	bhi.n	8005576 <_printf_i+0x2e>
 8005562:	2a62      	cmp	r2, #98	@ 0x62
 8005564:	d80b      	bhi.n	800557e <_printf_i+0x36>
 8005566:	2a00      	cmp	r2, #0
 8005568:	d100      	bne.n	800556c <_printf_i+0x24>
 800556a:	e0bc      	b.n	80056e6 <_printf_i+0x19e>
 800556c:	497b      	ldr	r1, [pc, #492]	@ (800575c <_printf_i+0x214>)
 800556e:	9104      	str	r1, [sp, #16]
 8005570:	2a58      	cmp	r2, #88	@ 0x58
 8005572:	d100      	bne.n	8005576 <_printf_i+0x2e>
 8005574:	e090      	b.n	8005698 <_printf_i+0x150>
 8005576:	0025      	movs	r5, r4
 8005578:	3542      	adds	r5, #66	@ 0x42
 800557a:	702a      	strb	r2, [r5, #0]
 800557c:	e022      	b.n	80055c4 <_printf_i+0x7c>
 800557e:	0010      	movs	r0, r2
 8005580:	3863      	subs	r0, #99	@ 0x63
 8005582:	2815      	cmp	r0, #21
 8005584:	d8f7      	bhi.n	8005576 <_printf_i+0x2e>
 8005586:	f7fa fdc7 	bl	8000118 <__gnu_thumb1_case_shi>
 800558a:	0016      	.short	0x0016
 800558c:	fff6001f 	.word	0xfff6001f
 8005590:	fff6fff6 	.word	0xfff6fff6
 8005594:	001ffff6 	.word	0x001ffff6
 8005598:	fff6fff6 	.word	0xfff6fff6
 800559c:	fff6fff6 	.word	0xfff6fff6
 80055a0:	003600a1 	.word	0x003600a1
 80055a4:	fff60080 	.word	0xfff60080
 80055a8:	00b2fff6 	.word	0x00b2fff6
 80055ac:	0036fff6 	.word	0x0036fff6
 80055b0:	fff6fff6 	.word	0xfff6fff6
 80055b4:	0084      	.short	0x0084
 80055b6:	0025      	movs	r5, r4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	3542      	adds	r5, #66	@ 0x42
 80055bc:	1d11      	adds	r1, r2, #4
 80055be:	6019      	str	r1, [r3, #0]
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	702b      	strb	r3, [r5, #0]
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0a0      	b.n	800570a <_printf_i+0x1c2>
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	6809      	ldr	r1, [r1, #0]
 80055cc:	1d02      	adds	r2, r0, #4
 80055ce:	060d      	lsls	r5, r1, #24
 80055d0:	d50b      	bpl.n	80055ea <_printf_i+0xa2>
 80055d2:	6806      	ldr	r6, [r0, #0]
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	da03      	bge.n	80055e2 <_printf_i+0x9a>
 80055da:	232d      	movs	r3, #45	@ 0x2d
 80055dc:	9a03      	ldr	r2, [sp, #12]
 80055de:	4276      	negs	r6, r6
 80055e0:	7013      	strb	r3, [r2, #0]
 80055e2:	4b5e      	ldr	r3, [pc, #376]	@ (800575c <_printf_i+0x214>)
 80055e4:	270a      	movs	r7, #10
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	e018      	b.n	800561c <_printf_i+0xd4>
 80055ea:	6806      	ldr	r6, [r0, #0]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	0649      	lsls	r1, r1, #25
 80055f0:	d5f1      	bpl.n	80055d6 <_printf_i+0x8e>
 80055f2:	b236      	sxth	r6, r6
 80055f4:	e7ef      	b.n	80055d6 <_printf_i+0x8e>
 80055f6:	6808      	ldr	r0, [r1, #0]
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	c940      	ldmia	r1!, {r6}
 80055fc:	0605      	lsls	r5, r0, #24
 80055fe:	d402      	bmi.n	8005606 <_printf_i+0xbe>
 8005600:	0640      	lsls	r0, r0, #25
 8005602:	d500      	bpl.n	8005606 <_printf_i+0xbe>
 8005604:	b2b6      	uxth	r6, r6
 8005606:	6019      	str	r1, [r3, #0]
 8005608:	4b54      	ldr	r3, [pc, #336]	@ (800575c <_printf_i+0x214>)
 800560a:	270a      	movs	r7, #10
 800560c:	9304      	str	r3, [sp, #16]
 800560e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005610:	d100      	bne.n	8005614 <_printf_i+0xcc>
 8005612:	3f02      	subs	r7, #2
 8005614:	0023      	movs	r3, r4
 8005616:	2200      	movs	r2, #0
 8005618:	3343      	adds	r3, #67	@ 0x43
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	6863      	ldr	r3, [r4, #4]
 800561e:	60a3      	str	r3, [r4, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	db03      	blt.n	800562c <_printf_i+0xe4>
 8005624:	2104      	movs	r1, #4
 8005626:	6822      	ldr	r2, [r4, #0]
 8005628:	438a      	bics	r2, r1
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	2e00      	cmp	r6, #0
 800562e:	d102      	bne.n	8005636 <_printf_i+0xee>
 8005630:	9d03      	ldr	r5, [sp, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <_printf_i+0x108>
 8005636:	9d03      	ldr	r5, [sp, #12]
 8005638:	0030      	movs	r0, r6
 800563a:	0039      	movs	r1, r7
 800563c:	f7fa fdfc 	bl	8000238 <__aeabi_uidivmod>
 8005640:	9b04      	ldr	r3, [sp, #16]
 8005642:	3d01      	subs	r5, #1
 8005644:	5c5b      	ldrb	r3, [r3, r1]
 8005646:	702b      	strb	r3, [r5, #0]
 8005648:	0033      	movs	r3, r6
 800564a:	0006      	movs	r6, r0
 800564c:	429f      	cmp	r7, r3
 800564e:	d9f3      	bls.n	8005638 <_printf_i+0xf0>
 8005650:	2f08      	cmp	r7, #8
 8005652:	d109      	bne.n	8005668 <_printf_i+0x120>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	07db      	lsls	r3, r3, #31
 8005658:	d506      	bpl.n	8005668 <_printf_i+0x120>
 800565a:	6862      	ldr	r2, [r4, #4]
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	429a      	cmp	r2, r3
 8005660:	dc02      	bgt.n	8005668 <_printf_i+0x120>
 8005662:	2330      	movs	r3, #48	@ 0x30
 8005664:	3d01      	subs	r5, #1
 8005666:	702b      	strb	r3, [r5, #0]
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	1b5b      	subs	r3, r3, r5
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	9b07      	ldr	r3, [sp, #28]
 8005670:	0021      	movs	r1, r4
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	9805      	ldr	r0, [sp, #20]
 8005676:	9b06      	ldr	r3, [sp, #24]
 8005678:	aa09      	add	r2, sp, #36	@ 0x24
 800567a:	f7ff fef5 	bl	8005468 <_printf_common>
 800567e:	3001      	adds	r0, #1
 8005680:	d148      	bne.n	8005714 <_printf_i+0x1cc>
 8005682:	2001      	movs	r0, #1
 8005684:	4240      	negs	r0, r0
 8005686:	b00b      	add	sp, #44	@ 0x2c
 8005688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800568a:	2220      	movs	r2, #32
 800568c:	6809      	ldr	r1, [r1, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	6022      	str	r2, [r4, #0]
 8005692:	2278      	movs	r2, #120	@ 0x78
 8005694:	4932      	ldr	r1, [pc, #200]	@ (8005760 <_printf_i+0x218>)
 8005696:	9104      	str	r1, [sp, #16]
 8005698:	0021      	movs	r1, r4
 800569a:	3145      	adds	r1, #69	@ 0x45
 800569c:	700a      	strb	r2, [r1, #0]
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	6822      	ldr	r2, [r4, #0]
 80056a2:	c940      	ldmia	r1!, {r6}
 80056a4:	0610      	lsls	r0, r2, #24
 80056a6:	d402      	bmi.n	80056ae <_printf_i+0x166>
 80056a8:	0650      	lsls	r0, r2, #25
 80056aa:	d500      	bpl.n	80056ae <_printf_i+0x166>
 80056ac:	b2b6      	uxth	r6, r6
 80056ae:	6019      	str	r1, [r3, #0]
 80056b0:	07d3      	lsls	r3, r2, #31
 80056b2:	d502      	bpl.n	80056ba <_printf_i+0x172>
 80056b4:	2320      	movs	r3, #32
 80056b6:	4313      	orrs	r3, r2
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	d001      	beq.n	80056c2 <_printf_i+0x17a>
 80056be:	2710      	movs	r7, #16
 80056c0:	e7a8      	b.n	8005614 <_printf_i+0xcc>
 80056c2:	2220      	movs	r2, #32
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	4393      	bics	r3, r2
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	e7f8      	b.n	80056be <_printf_i+0x176>
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	680d      	ldr	r5, [r1, #0]
 80056d0:	1d10      	adds	r0, r2, #4
 80056d2:	6949      	ldr	r1, [r1, #20]
 80056d4:	6018      	str	r0, [r3, #0]
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	062e      	lsls	r6, r5, #24
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0x198>
 80056dc:	6019      	str	r1, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0x19e>
 80056e0:	066d      	lsls	r5, r5, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0x194>
 80056e4:	8019      	strh	r1, [r3, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	9d03      	ldr	r5, [sp, #12]
 80056ea:	6123      	str	r3, [r4, #16]
 80056ec:	e7bf      	b.n	800566e <_printf_i+0x126>
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	1d11      	adds	r1, r2, #4
 80056f2:	6019      	str	r1, [r3, #0]
 80056f4:	6815      	ldr	r5, [r2, #0]
 80056f6:	2100      	movs	r1, #0
 80056f8:	0028      	movs	r0, r5
 80056fa:	6862      	ldr	r2, [r4, #4]
 80056fc:	f000 f858 	bl	80057b0 <memchr>
 8005700:	2800      	cmp	r0, #0
 8005702:	d001      	beq.n	8005708 <_printf_i+0x1c0>
 8005704:	1b40      	subs	r0, r0, r5
 8005706:	6060      	str	r0, [r4, #4]
 8005708:	6863      	ldr	r3, [r4, #4]
 800570a:	6123      	str	r3, [r4, #16]
 800570c:	2300      	movs	r3, #0
 800570e:	9a03      	ldr	r2, [sp, #12]
 8005710:	7013      	strb	r3, [r2, #0]
 8005712:	e7ac      	b.n	800566e <_printf_i+0x126>
 8005714:	002a      	movs	r2, r5
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	9906      	ldr	r1, [sp, #24]
 800571a:	9805      	ldr	r0, [sp, #20]
 800571c:	9d07      	ldr	r5, [sp, #28]
 800571e:	47a8      	blx	r5
 8005720:	3001      	adds	r0, #1
 8005722:	d0ae      	beq.n	8005682 <_printf_i+0x13a>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	079b      	lsls	r3, r3, #30
 8005728:	d415      	bmi.n	8005756 <_printf_i+0x20e>
 800572a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572c:	68e0      	ldr	r0, [r4, #12]
 800572e:	4298      	cmp	r0, r3
 8005730:	daa9      	bge.n	8005686 <_printf_i+0x13e>
 8005732:	0018      	movs	r0, r3
 8005734:	e7a7      	b.n	8005686 <_printf_i+0x13e>
 8005736:	0022      	movs	r2, r4
 8005738:	2301      	movs	r3, #1
 800573a:	9906      	ldr	r1, [sp, #24]
 800573c:	9805      	ldr	r0, [sp, #20]
 800573e:	9e07      	ldr	r6, [sp, #28]
 8005740:	3219      	adds	r2, #25
 8005742:	47b0      	blx	r6
 8005744:	3001      	adds	r0, #1
 8005746:	d09c      	beq.n	8005682 <_printf_i+0x13a>
 8005748:	3501      	adds	r5, #1
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	42ab      	cmp	r3, r5
 8005752:	dcf0      	bgt.n	8005736 <_printf_i+0x1ee>
 8005754:	e7e9      	b.n	800572a <_printf_i+0x1e2>
 8005756:	2500      	movs	r5, #0
 8005758:	e7f7      	b.n	800574a <_printf_i+0x202>
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	08005959 	.word	0x08005959
 8005760:	0800596a 	.word	0x0800596a

08005764 <memmove>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4288      	cmp	r0, r1
 8005768:	d806      	bhi.n	8005778 <memmove+0x14>
 800576a:	2300      	movs	r3, #0
 800576c:	429a      	cmp	r2, r3
 800576e:	d008      	beq.n	8005782 <memmove+0x1e>
 8005770:	5ccc      	ldrb	r4, [r1, r3]
 8005772:	54c4      	strb	r4, [r0, r3]
 8005774:	3301      	adds	r3, #1
 8005776:	e7f9      	b.n	800576c <memmove+0x8>
 8005778:	188b      	adds	r3, r1, r2
 800577a:	4298      	cmp	r0, r3
 800577c:	d2f5      	bcs.n	800576a <memmove+0x6>
 800577e:	3a01      	subs	r2, #1
 8005780:	d200      	bcs.n	8005784 <memmove+0x20>
 8005782:	bd10      	pop	{r4, pc}
 8005784:	5c8b      	ldrb	r3, [r1, r2]
 8005786:	5483      	strb	r3, [r0, r2]
 8005788:	e7f9      	b.n	800577e <memmove+0x1a>
	...

0800578c <_sbrk_r>:
 800578c:	2300      	movs	r3, #0
 800578e:	b570      	push	{r4, r5, r6, lr}
 8005790:	4d06      	ldr	r5, [pc, #24]	@ (80057ac <_sbrk_r+0x20>)
 8005792:	0004      	movs	r4, r0
 8005794:	0008      	movs	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fb fb9e 	bl	8000ed8 <_sbrk>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d103      	bne.n	80057a8 <_sbrk_r+0x1c>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d000      	beq.n	80057a8 <_sbrk_r+0x1c>
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	200003b4 	.word	0x200003b4

080057b0 <memchr>:
 80057b0:	b2c9      	uxtb	r1, r1
 80057b2:	1882      	adds	r2, r0, r2
 80057b4:	4290      	cmp	r0, r2
 80057b6:	d101      	bne.n	80057bc <memchr+0xc>
 80057b8:	2000      	movs	r0, #0
 80057ba:	4770      	bx	lr
 80057bc:	7803      	ldrb	r3, [r0, #0]
 80057be:	428b      	cmp	r3, r1
 80057c0:	d0fb      	beq.n	80057ba <memchr+0xa>
 80057c2:	3001      	adds	r0, #1
 80057c4:	e7f6      	b.n	80057b4 <memchr+0x4>

080057c6 <memcpy>:
 80057c6:	2300      	movs	r3, #0
 80057c8:	b510      	push	{r4, lr}
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d100      	bne.n	80057d0 <memcpy+0xa>
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	5ccc      	ldrb	r4, [r1, r3]
 80057d2:	54c4      	strb	r4, [r0, r3]
 80057d4:	3301      	adds	r3, #1
 80057d6:	e7f8      	b.n	80057ca <memcpy+0x4>

080057d8 <_realloc_r>:
 80057d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057da:	0006      	movs	r6, r0
 80057dc:	000c      	movs	r4, r1
 80057de:	0015      	movs	r5, r2
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d105      	bne.n	80057f0 <_realloc_r+0x18>
 80057e4:	0011      	movs	r1, r2
 80057e6:	f7ff fc51 	bl	800508c <_malloc_r>
 80057ea:	0004      	movs	r4, r0
 80057ec:	0020      	movs	r0, r4
 80057ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	d103      	bne.n	80057fc <_realloc_r+0x24>
 80057f4:	f7ff fbde 	bl	8004fb4 <_free_r>
 80057f8:	2400      	movs	r4, #0
 80057fa:	e7f7      	b.n	80057ec <_realloc_r+0x14>
 80057fc:	f000 f81b 	bl	8005836 <_malloc_usable_size_r>
 8005800:	0007      	movs	r7, r0
 8005802:	4285      	cmp	r5, r0
 8005804:	d802      	bhi.n	800580c <_realloc_r+0x34>
 8005806:	0843      	lsrs	r3, r0, #1
 8005808:	42ab      	cmp	r3, r5
 800580a:	d3ef      	bcc.n	80057ec <_realloc_r+0x14>
 800580c:	0029      	movs	r1, r5
 800580e:	0030      	movs	r0, r6
 8005810:	f7ff fc3c 	bl	800508c <_malloc_r>
 8005814:	9001      	str	r0, [sp, #4]
 8005816:	2800      	cmp	r0, #0
 8005818:	d0ee      	beq.n	80057f8 <_realloc_r+0x20>
 800581a:	002a      	movs	r2, r5
 800581c:	42bd      	cmp	r5, r7
 800581e:	d900      	bls.n	8005822 <_realloc_r+0x4a>
 8005820:	003a      	movs	r2, r7
 8005822:	0021      	movs	r1, r4
 8005824:	9801      	ldr	r0, [sp, #4]
 8005826:	f7ff ffce 	bl	80057c6 <memcpy>
 800582a:	0021      	movs	r1, r4
 800582c:	0030      	movs	r0, r6
 800582e:	f7ff fbc1 	bl	8004fb4 <_free_r>
 8005832:	9c01      	ldr	r4, [sp, #4]
 8005834:	e7da      	b.n	80057ec <_realloc_r+0x14>

08005836 <_malloc_usable_size_r>:
 8005836:	1f0b      	subs	r3, r1, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1f18      	subs	r0, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	da01      	bge.n	8005844 <_malloc_usable_size_r+0xe>
 8005840:	580b      	ldr	r3, [r1, r0]
 8005842:	18c0      	adds	r0, r0, r3
 8005844:	4770      	bx	lr
	...

08005848 <_init>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr

08005854 <_fini>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr
